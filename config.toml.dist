# Example configuration
#
# Copy this file to config.toml and edit appropriately.

# Backend parameters
[backend]
# Defines the backend type. Possible values are: local_grpc, remote_grpc.
# If you want your motki program to interact with a remote motkid installation,
# you can configure it here.
kind="local_grpc"
# Enable a gRPC server as defined in backend.server_grpc.
# Remote clients can connect to this server to interact with the application.
enable_server=false

# Remote gRPC Backend parameters
# This section is required when backend.kind is remote_grpc.
[backend.remote_grpc]
# Address of the remote gRPC server.
addr="localhost:18443"
# If enabled, the application will skip verifying the validity of the server's
# SSL certificate. This should only be enabled for local development.
insecure_skip_verify_ssl=false

# gRPC Server parameters
# This section is required when backend.enable_server is true.
[backend.server_grpc]
# Address to listen for gRPC requests.
addr="localhost:18443"
# If enabled, the application will generate a certificate using Let's Encrypt
# using the server's hostname specified in backend.server_grpc.addr.
autocert=false
# If backend.server_grpc.autocert is enabled, this option can be used to add
# additional hostnames that should be automatically certified by Let's Encrypt.
extra_hosts=[]
# Full path to the certificate file, including the CA chain.
# If backend.server_grpc.autocert is enabled, backend.server_grpc.certfile
# should be an empty string.
certfile="/path/to/cert.crt"
# Full path to the certificate private key.
# If http.ssl.autocert is enabled, http.ssl.keyfile should be an empty string.
keyfile="/path/to/cert.pem"

# Logging parameters
[logging]
# Define the log level. One of: debug, info, warn, error, fatal, panic
level="debug"

# Database connection parameters
[db]
# Valid database/sql connection string. Currently only postgres is supported.
connection_string="postgres://localhost/motki"
# Max number of connections to keep open.
max_connections=5


# HTTP server parameters
[http]
# http.listen requires a port specification, but host is optional.
# The hostname is considered the canonical hostname.
listen="localhost:8080"
# If http.redirect is set to true, the server will listen on any host/ip and
# configured port. If a request is received with a different host than the
# canonical hostname specified in the http.listen option, the user will be
# redirected.
redirect=false


# HTTPS server parameters
[http.ssl]
# http.ssl.listen requires a port specification, but host is optional.
# The hostname should be a canonical name that matches the SSL certificate.
# If the http.redirect option is specified, the server will listen on any
# host/ip and configured port. If a request is received with a different host
# than the canonical hostname specified in http.ssl.listen, the user will be
# redirected.
listen="localhost:8443"
# If enabled, the application will generate a certificate using Let's Encrypt
# using the server's canonical hostname specified in http.ssl.listen.
autocert=false
# If http.ssl.autocert is enabled, this option can be used to add additional
# hostnames that should be automatically certified by Let's Encrypt.
extra_hosts=[]
# Full path to the certificate file, including the CA chain.
# If http.ssl.autocert is enabled, http.ssl.certfile should be an empty string.
certfile="/path/to/cert.crt"
# Full path to the certificate private key.
# If http.ssl.autocert is enabled, http.ssl.keyfile should be an empty string.
keyfile="/path/to/cert.pem"
# If http.ssl.require is enabled, any insecure request will be redirected to
# the configured http.ssl.listen address.
require=false


# Sessions parameters
[http.sessions]
# Defines which type of session store the application should use.
# Possible values are "file" or "memory".
# Specifying "memory" will store session data in memory. Specifying
# "file" will store session data in the path specified by the
# http.sessions.file.storage_path option.
store="file"
# Controls whether session cookies are set on insecure connections.
# This should be set to true if http.ssl.require is enabled.
secure_only=false
# The session secret is used to authenticate cookie and CSRF tokens.
# Both cookies and CSRF tokens are created containing a signature that
# is generated using this secret.
secret="" # This needs to be changed!


# File session storage parameters
# This section is required when http.sessions.store is set to "file".
[http.sessions.file]
# Specifies where user session data will be stored.
storage_path="tmp"


# Templating parameters
[http.templates]
# Defines where the application's twig views are stored.
views_path="views"
# The base URL for external links (for example, in emails).
base_url="http://localhost:8080"


# Mail sending parameters
[mail]
# Address (host:port) for SMTP server.
smtp_address=":587"
# Username and password for SMTP authentication.
smtp_username=""
smtp_password=""
# System contact information as it should appear in the "From:" line in an email.
system={name="Moritake Industries", email="system@localhost"}


# EVE API parameters
# See https://developers.eveonline.com/applications to retreive these values.
[eveapi]
# Client ID generated for the application.
client_id=""
# Secret key generated for the application.
secret_key=""
# Return URL specified in the application configuration. This must be a valid
# value that matches what the server is listening on.
return_url="http://localhost:8080/auth/finish-login"
# A useful user agent string to describe the application when making requests
# to the EVE API.
user_agent="MOTKI Corp Integration <contact@tylersommer.pro>"
