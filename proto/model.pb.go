// Code generated by protoc-gen-go. DO NOT EDIT.
// source: model.proto

package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// A Role describes a user's authorization for certain resources within the system.
type Role int32

const (
	Role_ANON      Role = 0
	Role_USER      Role = 1
	Role_LOGISTICS Role = 2
)

var Role_name = map[int32]string{
	0: "ANON",
	1: "USER",
	2: "LOGISTICS",
}
var Role_value = map[string]int32{
	"ANON":      0,
	"USER":      1,
	"LOGISTICS": 2,
}

func (x Role) String() string {
	return proto1.EnumName(Role_name, int32(x))
}
func (Role) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type Product_Kind int32

const (
	Product_BUY   Product_Kind = 0
	Product_BUILD Product_Kind = 1
)

var Product_Kind_name = map[int32]string{
	0: "BUY",
	1: "BUILD",
}
var Product_Kind_value = map[string]int32{
	"BUY":   0,
	"BUILD": 1,
}

func (x Product_Kind) String() string {
	return proto1.EnumName(Product_Kind_name, int32(x))
}
func (Product_Kind) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{15, 0} }

// Kind is blueprint original (BPO) or copy (BPC)
type Blueprint_Kind int32

const (
	Blueprint_ORIGINAL Blueprint_Kind = 0
	Blueprint_COPY     Blueprint_Kind = 1
)

var Blueprint_Kind_name = map[int32]string{
	0: "ORIGINAL",
	1: "COPY",
}
var Blueprint_Kind_value = map[string]int32{
	"ORIGINAL": 0,
	"COPY":     1,
}

func (x Blueprint_Kind) String() string {
	return proto1.EnumName(Blueprint_Kind_name, int32(x))
}
func (Blueprint_Kind) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{26, 0} }

// A Character is a player-controlled character.
type Character struct {
	Id            int64                      `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	CorporationId int64                      `protobuf:"varint,2,opt,name=corporation_id,json=corporationId" json:"corporation_id,omitempty"`
	AllianceId    int64                      `protobuf:"varint,3,opt,name=alliance_id,json=allianceId" json:"alliance_id,omitempty"`
	Name          string                     `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	BloodlineId   int32                      `protobuf:"varint,5,opt,name=bloodline_id,json=bloodlineId" json:"bloodline_id,omitempty"`
	RaceId        int32                      `protobuf:"varint,6,opt,name=race_id,json=raceId" json:"race_id,omitempty"`
	AncestryId    int32                      `protobuf:"varint,7,opt,name=ancestry_id,json=ancestryId" json:"ancestry_id,omitempty"`
	BirthDate     *google_protobuf.Timestamp `protobuf:"bytes,8,opt,name=birth_date,json=birthDate" json:"birth_date,omitempty"`
	Description   string                     `protobuf:"bytes,9,opt,name=description" json:"description,omitempty"`
}

func (m *Character) Reset()                    { *m = Character{} }
func (m *Character) String() string            { return proto1.CompactTextString(m) }
func (*Character) ProtoMessage()               {}
func (*Character) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *Character) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Character) GetCorporationId() int64 {
	if m != nil {
		return m.CorporationId
	}
	return 0
}

func (m *Character) GetAllianceId() int64 {
	if m != nil {
		return m.AllianceId
	}
	return 0
}

func (m *Character) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Character) GetBloodlineId() int32 {
	if m != nil {
		return m.BloodlineId
	}
	return 0
}

func (m *Character) GetRaceId() int32 {
	if m != nil {
		return m.RaceId
	}
	return 0
}

func (m *Character) GetAncestryId() int32 {
	if m != nil {
		return m.AncestryId
	}
	return 0
}

func (m *Character) GetBirthDate() *google_protobuf.Timestamp {
	if m != nil {
		return m.BirthDate
	}
	return nil
}

func (m *Character) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

// A Corporation is a corporation, either player-controlled or NPC.
type Corporation struct {
	Id           int64                      `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	AllianceId   int64                      `protobuf:"varint,2,opt,name=alliance_id,json=allianceId" json:"alliance_id,omitempty"`
	Name         string                     `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	CreationDate *google_protobuf.Timestamp `protobuf:"bytes,4,opt,name=creation_date,json=creationDate" json:"creation_date,omitempty"`
	Description  string                     `protobuf:"bytes,5,opt,name=description" json:"description,omitempty"`
	Ticker       string                     `protobuf:"bytes,6,opt,name=ticker" json:"ticker,omitempty"`
}

func (m *Corporation) Reset()                    { *m = Corporation{} }
func (m *Corporation) String() string            { return proto1.CompactTextString(m) }
func (*Corporation) ProtoMessage()               {}
func (*Corporation) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *Corporation) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Corporation) GetAllianceId() int64 {
	if m != nil {
		return m.AllianceId
	}
	return 0
}

func (m *Corporation) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Corporation) GetCreationDate() *google_protobuf.Timestamp {
	if m != nil {
		return m.CreationDate
	}
	return nil
}

func (m *Corporation) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Corporation) GetTicker() string {
	if m != nil {
		return m.Ticker
	}
	return ""
}

// An Alliance is a player-controlled alliance.
type Alliance struct {
	Id          int64                      `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name        string                     `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	DateFounded *google_protobuf.Timestamp `protobuf:"bytes,3,opt,name=date_founded,json=dateFounded" json:"date_founded,omitempty"`
	Ticker      string                     `protobuf:"bytes,4,opt,name=ticker" json:"ticker,omitempty"`
}

func (m *Alliance) Reset()                    { *m = Alliance{} }
func (m *Alliance) String() string            { return proto1.CompactTextString(m) }
func (*Alliance) ProtoMessage()               {}
func (*Alliance) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *Alliance) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Alliance) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Alliance) GetDateFounded() *google_protobuf.Timestamp {
	if m != nil {
		return m.DateFounded
	}
	return nil
}

func (m *Alliance) GetTicker() string {
	if m != nil {
		return m.Ticker
	}
	return ""
}

// A Structure is a player-controlled citadel.
type Structure struct {
	Id       int64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	SystemId int64  `protobuf:"varint,3,opt,name=system_id,json=systemId" json:"system_id,omitempty"`
	TypeId   int64  `protobuf:"varint,4,opt,name=type_id,json=typeId" json:"type_id,omitempty"`
}

func (m *Structure) Reset()                    { *m = Structure{} }
func (m *Structure) String() string            { return proto1.CompactTextString(m) }
func (*Structure) ProtoMessage()               {}
func (*Structure) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *Structure) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Structure) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Structure) GetSystemId() int64 {
	if m != nil {
		return m.SystemId
	}
	return 0
}

func (m *Structure) GetTypeId() int64 {
	if m != nil {
		return m.TypeId
	}
	return 0
}

// A CorporationStructure is a structure with additional, sensitive information.
type CorporationStructure struct {
	Id                   int64                      `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name                 string                     `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	SystemId             int64                      `protobuf:"varint,3,opt,name=system_id,json=systemId" json:"system_id,omitempty"`
	TypeId               int64                      `protobuf:"varint,4,opt,name=type_id,json=typeId" json:"type_id,omitempty"`
	ProfileId            int64                      `protobuf:"varint,5,opt,name=profile_id,json=profileId" json:"profile_id,omitempty"`
	Services             []string                   `protobuf:"bytes,6,rep,name=services" json:"services,omitempty"`
	FuelExpires          *google_protobuf.Timestamp `protobuf:"bytes,7,opt,name=fuel_expires,json=fuelExpires" json:"fuel_expires,omitempty"`
	StateStart           *google_protobuf.Timestamp `protobuf:"bytes,8,opt,name=state_start,json=stateStart" json:"state_start,omitempty"`
	StateEnd             *google_protobuf.Timestamp `protobuf:"bytes,9,opt,name=state_end,json=stateEnd" json:"state_end,omitempty"`
	UnanchorsAt          *google_protobuf.Timestamp `protobuf:"bytes,10,opt,name=unanchors_at,json=unanchorsAt" json:"unanchors_at,omitempty"`
	VulnerabilityWeekday int64                      `protobuf:"varint,11,opt,name=vulnerability_weekday,json=vulnerabilityWeekday" json:"vulnerability_weekday,omitempty"`
	VulnerabilityHour    int64                      `protobuf:"varint,12,opt,name=vulnerability_hour,json=vulnerabilityHour" json:"vulnerability_hour,omitempty"`
	State                string                     `protobuf:"bytes,13,opt,name=state" json:"state,omitempty"`
}

func (m *CorporationStructure) Reset()                    { *m = CorporationStructure{} }
func (m *CorporationStructure) String() string            { return proto1.CompactTextString(m) }
func (*CorporationStructure) ProtoMessage()               {}
func (*CorporationStructure) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *CorporationStructure) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CorporationStructure) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CorporationStructure) GetSystemId() int64 {
	if m != nil {
		return m.SystemId
	}
	return 0
}

func (m *CorporationStructure) GetTypeId() int64 {
	if m != nil {
		return m.TypeId
	}
	return 0
}

func (m *CorporationStructure) GetProfileId() int64 {
	if m != nil {
		return m.ProfileId
	}
	return 0
}

func (m *CorporationStructure) GetServices() []string {
	if m != nil {
		return m.Services
	}
	return nil
}

func (m *CorporationStructure) GetFuelExpires() *google_protobuf.Timestamp {
	if m != nil {
		return m.FuelExpires
	}
	return nil
}

func (m *CorporationStructure) GetStateStart() *google_protobuf.Timestamp {
	if m != nil {
		return m.StateStart
	}
	return nil
}

func (m *CorporationStructure) GetStateEnd() *google_protobuf.Timestamp {
	if m != nil {
		return m.StateEnd
	}
	return nil
}

func (m *CorporationStructure) GetUnanchorsAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.UnanchorsAt
	}
	return nil
}

func (m *CorporationStructure) GetVulnerabilityWeekday() int64 {
	if m != nil {
		return m.VulnerabilityWeekday
	}
	return 0
}

func (m *CorporationStructure) GetVulnerabilityHour() int64 {
	if m != nil {
		return m.VulnerabilityHour
	}
	return 0
}

func (m *CorporationStructure) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

type GetCharacterRequest struct {
	Token       *Token `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	Role        Role   `protobuf:"varint,2,opt,name=role,enum=motki.model.Role" json:"role,omitempty"`
	CharacterId int64  `protobuf:"varint,3,opt,name=character_id,json=characterId" json:"character_id,omitempty"`
}

func (m *GetCharacterRequest) Reset()                    { *m = GetCharacterRequest{} }
func (m *GetCharacterRequest) String() string            { return proto1.CompactTextString(m) }
func (*GetCharacterRequest) ProtoMessage()               {}
func (*GetCharacterRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *GetCharacterRequest) GetToken() *Token {
	if m != nil {
		return m.Token
	}
	return nil
}

func (m *GetCharacterRequest) GetRole() Role {
	if m != nil {
		return m.Role
	}
	return Role_ANON
}

func (m *GetCharacterRequest) GetCharacterId() int64 {
	if m != nil {
		return m.CharacterId
	}
	return 0
}

type CharacterResponse struct {
	Result    *Result    `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	Character *Character `protobuf:"bytes,2,opt,name=character" json:"character,omitempty"`
}

func (m *CharacterResponse) Reset()                    { *m = CharacterResponse{} }
func (m *CharacterResponse) String() string            { return proto1.CompactTextString(m) }
func (*CharacterResponse) ProtoMessage()               {}
func (*CharacterResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

func (m *CharacterResponse) GetResult() *Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *CharacterResponse) GetCharacter() *Character {
	if m != nil {
		return m.Character
	}
	return nil
}

type GetCorporationRequest struct {
	Token         *Token `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	CorporationId int64  `protobuf:"varint,2,opt,name=corporation_id,json=corporationId" json:"corporation_id,omitempty"`
}

func (m *GetCorporationRequest) Reset()                    { *m = GetCorporationRequest{} }
func (m *GetCorporationRequest) String() string            { return proto1.CompactTextString(m) }
func (*GetCorporationRequest) ProtoMessage()               {}
func (*GetCorporationRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

func (m *GetCorporationRequest) GetToken() *Token {
	if m != nil {
		return m.Token
	}
	return nil
}

func (m *GetCorporationRequest) GetCorporationId() int64 {
	if m != nil {
		return m.CorporationId
	}
	return 0
}

type CorporationResponse struct {
	Result      *Result      `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	Corporation *Corporation `protobuf:"bytes,2,opt,name=corporation" json:"corporation,omitempty"`
}

func (m *CorporationResponse) Reset()                    { *m = CorporationResponse{} }
func (m *CorporationResponse) String() string            { return proto1.CompactTextString(m) }
func (*CorporationResponse) ProtoMessage()               {}
func (*CorporationResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8} }

func (m *CorporationResponse) GetResult() *Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *CorporationResponse) GetCorporation() *Corporation {
	if m != nil {
		return m.Corporation
	}
	return nil
}

type GetAllianceRequest struct {
	Token      *Token `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	AllianceId int64  `protobuf:"varint,2,opt,name=alliance_id,json=allianceId" json:"alliance_id,omitempty"`
}

func (m *GetAllianceRequest) Reset()                    { *m = GetAllianceRequest{} }
func (m *GetAllianceRequest) String() string            { return proto1.CompactTextString(m) }
func (*GetAllianceRequest) ProtoMessage()               {}
func (*GetAllianceRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{9} }

func (m *GetAllianceRequest) GetToken() *Token {
	if m != nil {
		return m.Token
	}
	return nil
}

func (m *GetAllianceRequest) GetAllianceId() int64 {
	if m != nil {
		return m.AllianceId
	}
	return 0
}

type AllianceResponse struct {
	Result   *Result   `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	Alliance *Alliance `protobuf:"bytes,2,opt,name=alliance" json:"alliance,omitempty"`
}

func (m *AllianceResponse) Reset()                    { *m = AllianceResponse{} }
func (m *AllianceResponse) String() string            { return proto1.CompactTextString(m) }
func (*AllianceResponse) ProtoMessage()               {}
func (*AllianceResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{10} }

func (m *AllianceResponse) GetResult() *Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *AllianceResponse) GetAlliance() *Alliance {
	if m != nil {
		return m.Alliance
	}
	return nil
}

type GetStructureRequest struct {
	Token       *Token `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	StructureId int64  `protobuf:"varint,2,opt,name=structure_id,json=structureId" json:"structure_id,omitempty"`
}

func (m *GetStructureRequest) Reset()                    { *m = GetStructureRequest{} }
func (m *GetStructureRequest) String() string            { return proto1.CompactTextString(m) }
func (*GetStructureRequest) ProtoMessage()               {}
func (*GetStructureRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{11} }

func (m *GetStructureRequest) GetToken() *Token {
	if m != nil {
		return m.Token
	}
	return nil
}

func (m *GetStructureRequest) GetStructureId() int64 {
	if m != nil {
		return m.StructureId
	}
	return 0
}

type GetStructureResponse struct {
	Result    *Result    `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	Structure *Structure `protobuf:"bytes,2,opt,name=structure" json:"structure,omitempty"`
}

func (m *GetStructureResponse) Reset()                    { *m = GetStructureResponse{} }
func (m *GetStructureResponse) String() string            { return proto1.CompactTextString(m) }
func (*GetStructureResponse) ProtoMessage()               {}
func (*GetStructureResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{12} }

func (m *GetStructureResponse) GetResult() *Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *GetStructureResponse) GetStructure() *Structure {
	if m != nil {
		return m.Structure
	}
	return nil
}

type GetCorpStructuresRequest struct {
	Token *Token `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (m *GetCorpStructuresRequest) Reset()                    { *m = GetCorpStructuresRequest{} }
func (m *GetCorpStructuresRequest) String() string            { return proto1.CompactTextString(m) }
func (*GetCorpStructuresRequest) ProtoMessage()               {}
func (*GetCorpStructuresRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{13} }

func (m *GetCorpStructuresRequest) GetToken() *Token {
	if m != nil {
		return m.Token
	}
	return nil
}

type GetCorpStructuresResponse struct {
	Result     *Result                 `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	Structures []*CorporationStructure `protobuf:"bytes,2,rep,name=structures" json:"structures,omitempty"`
}

func (m *GetCorpStructuresResponse) Reset()                    { *m = GetCorpStructuresResponse{} }
func (m *GetCorpStructuresResponse) String() string            { return proto1.CompactTextString(m) }
func (*GetCorpStructuresResponse) ProtoMessage()               {}
func (*GetCorpStructuresResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{14} }

func (m *GetCorpStructuresResponse) GetResult() *Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *GetCorpStructuresResponse) GetStructures() []*CorporationStructure {
	if m != nil {
		return m.Structures
	}
	return nil
}

// A Product is one component in a production chain.
type Product struct {
	Id                 int32        `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	TypeId             int64        `protobuf:"varint,2,opt,name=type_id,json=typeId" json:"type_id,omitempty"`
	Quantity           int32        `protobuf:"varint,3,opt,name=quantity" json:"quantity,omitempty"`
	MarketPrice        float64      `protobuf:"fixed64,4,opt,name=market_price,json=marketPrice" json:"market_price,omitempty"`
	MarketRegionId     int32        `protobuf:"varint,5,opt,name=market_region_id,json=marketRegionId" json:"market_region_id,omitempty"`
	MaterialEfficiency float64      `protobuf:"fixed64,6,opt,name=material_efficiency,json=materialEfficiency" json:"material_efficiency,omitempty"`
	BatchSize          int32        `protobuf:"varint,7,opt,name=batch_size,json=batchSize" json:"batch_size,omitempty"`
	Kind               Product_Kind `protobuf:"varint,8,opt,name=kind,enum=motki.model.Product_Kind" json:"kind,omitempty"`
	ParentId           int32        `protobuf:"varint,9,opt,name=parent_id,json=parentId" json:"parent_id,omitempty"`
	Material           []*Product   `protobuf:"bytes,10,rep,name=material" json:"material,omitempty"`
}

func (m *Product) Reset()                    { *m = Product{} }
func (m *Product) String() string            { return proto1.CompactTextString(m) }
func (*Product) ProtoMessage()               {}
func (*Product) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{15} }

func (m *Product) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Product) GetTypeId() int64 {
	if m != nil {
		return m.TypeId
	}
	return 0
}

func (m *Product) GetQuantity() int32 {
	if m != nil {
		return m.Quantity
	}
	return 0
}

func (m *Product) GetMarketPrice() float64 {
	if m != nil {
		return m.MarketPrice
	}
	return 0
}

func (m *Product) GetMarketRegionId() int32 {
	if m != nil {
		return m.MarketRegionId
	}
	return 0
}

func (m *Product) GetMaterialEfficiency() float64 {
	if m != nil {
		return m.MaterialEfficiency
	}
	return 0
}

func (m *Product) GetBatchSize() int32 {
	if m != nil {
		return m.BatchSize
	}
	return 0
}

func (m *Product) GetKind() Product_Kind {
	if m != nil {
		return m.Kind
	}
	return Product_BUY
}

func (m *Product) GetParentId() int32 {
	if m != nil {
		return m.ParentId
	}
	return 0
}

func (m *Product) GetMaterial() []*Product {
	if m != nil {
		return m.Material
	}
	return nil
}

type ProductResponse struct {
	Result  *Result  `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	Product *Product `protobuf:"bytes,2,opt,name=product" json:"product,omitempty"`
}

func (m *ProductResponse) Reset()                    { *m = ProductResponse{} }
func (m *ProductResponse) String() string            { return proto1.CompactTextString(m) }
func (*ProductResponse) ProtoMessage()               {}
func (*ProductResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{16} }

func (m *ProductResponse) GetResult() *Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *ProductResponse) GetProduct() *Product {
	if m != nil {
		return m.Product
	}
	return nil
}

type GetProductRequest struct {
	Token *Token `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	Id    int32  `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
}

func (m *GetProductRequest) Reset()                    { *m = GetProductRequest{} }
func (m *GetProductRequest) String() string            { return proto1.CompactTextString(m) }
func (*GetProductRequest) ProtoMessage()               {}
func (*GetProductRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{17} }

func (m *GetProductRequest) GetToken() *Token {
	if m != nil {
		return m.Token
	}
	return nil
}

func (m *GetProductRequest) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type NewProductRequest struct {
	Token  *Token `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	TypeId int64  `protobuf:"varint,2,opt,name=type_id,json=typeId" json:"type_id,omitempty"`
}

func (m *NewProductRequest) Reset()                    { *m = NewProductRequest{} }
func (m *NewProductRequest) String() string            { return proto1.CompactTextString(m) }
func (*NewProductRequest) ProtoMessage()               {}
func (*NewProductRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{18} }

func (m *NewProductRequest) GetToken() *Token {
	if m != nil {
		return m.Token
	}
	return nil
}

func (m *NewProductRequest) GetTypeId() int64 {
	if m != nil {
		return m.TypeId
	}
	return 0
}

type SaveProductRequest struct {
	Token   *Token   `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	Product *Product `protobuf:"bytes,2,opt,name=product" json:"product,omitempty"`
}

func (m *SaveProductRequest) Reset()                    { *m = SaveProductRequest{} }
func (m *SaveProductRequest) String() string            { return proto1.CompactTextString(m) }
func (*SaveProductRequest) ProtoMessage()               {}
func (*SaveProductRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{19} }

func (m *SaveProductRequest) GetToken() *Token {
	if m != nil {
		return m.Token
	}
	return nil
}

func (m *SaveProductRequest) GetProduct() *Product {
	if m != nil {
		return m.Product
	}
	return nil
}

type GetProductsRequest struct {
	Token *Token `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (m *GetProductsRequest) Reset()                    { *m = GetProductsRequest{} }
func (m *GetProductsRequest) String() string            { return proto1.CompactTextString(m) }
func (*GetProductsRequest) ProtoMessage()               {}
func (*GetProductsRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{20} }

func (m *GetProductsRequest) GetToken() *Token {
	if m != nil {
		return m.Token
	}
	return nil
}

type UpdateProductPricesRequest struct {
	Token   *Token   `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	Product *Product `protobuf:"bytes,2,opt,name=product" json:"product,omitempty"`
}

func (m *UpdateProductPricesRequest) Reset()                    { *m = UpdateProductPricesRequest{} }
func (m *UpdateProductPricesRequest) String() string            { return proto1.CompactTextString(m) }
func (*UpdateProductPricesRequest) ProtoMessage()               {}
func (*UpdateProductPricesRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{21} }

func (m *UpdateProductPricesRequest) GetToken() *Token {
	if m != nil {
		return m.Token
	}
	return nil
}

func (m *UpdateProductPricesRequest) GetProduct() *Product {
	if m != nil {
		return m.Product
	}
	return nil
}

type ProductsResponse struct {
	Result  *Result    `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	Product []*Product `protobuf:"bytes,2,rep,name=product" json:"product,omitempty"`
}

func (m *ProductsResponse) Reset()                    { *m = ProductsResponse{} }
func (m *ProductsResponse) String() string            { return proto1.CompactTextString(m) }
func (*ProductsResponse) ProtoMessage()               {}
func (*ProductsResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{22} }

func (m *ProductsResponse) GetResult() *Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *ProductsResponse) GetProduct() []*Product {
	if m != nil {
		return m.Product
	}
	return nil
}

// MarketPrice describes the current market price for the given type.
type MarketPrice struct {
	TypeId  int64   `protobuf:"varint,1,opt,name=type_id,json=typeId" json:"type_id,omitempty"`
	Average float64 `protobuf:"fixed64,2,opt,name=average" json:"average,omitempty"`
	Base    float64 `protobuf:"fixed64,3,opt,name=base" json:"base,omitempty"`
}

func (m *MarketPrice) Reset()                    { *m = MarketPrice{} }
func (m *MarketPrice) String() string            { return proto1.CompactTextString(m) }
func (*MarketPrice) ProtoMessage()               {}
func (*MarketPrice) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{23} }

func (m *MarketPrice) GetTypeId() int64 {
	if m != nil {
		return m.TypeId
	}
	return 0
}

func (m *MarketPrice) GetAverage() float64 {
	if m != nil {
		return m.Average
	}
	return 0
}

func (m *MarketPrice) GetBase() float64 {
	if m != nil {
		return m.Base
	}
	return 0
}

type GetMarketPriceRequest struct {
	Token  *Token  `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	TypeId []int64 `protobuf:"varint,2,rep,packed,name=type_id,json=typeId" json:"type_id,omitempty"`
}

func (m *GetMarketPriceRequest) Reset()                    { *m = GetMarketPriceRequest{} }
func (m *GetMarketPriceRequest) String() string            { return proto1.CompactTextString(m) }
func (*GetMarketPriceRequest) ProtoMessage()               {}
func (*GetMarketPriceRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{24} }

func (m *GetMarketPriceRequest) GetToken() *Token {
	if m != nil {
		return m.Token
	}
	return nil
}

func (m *GetMarketPriceRequest) GetTypeId() []int64 {
	if m != nil {
		return m.TypeId
	}
	return nil
}

type GetMarketPriceResponse struct {
	Result *Result                `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	Prices map[int64]*MarketPrice `protobuf:"bytes,2,rep,name=prices" json:"prices,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *GetMarketPriceResponse) Reset()                    { *m = GetMarketPriceResponse{} }
func (m *GetMarketPriceResponse) String() string            { return proto1.CompactTextString(m) }
func (*GetMarketPriceResponse) ProtoMessage()               {}
func (*GetMarketPriceResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{25} }

func (m *GetMarketPriceResponse) GetResult() *Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *GetMarketPriceResponse) GetPrices() map[int64]*MarketPrice {
	if m != nil {
		return m.Prices
	}
	return nil
}

// Blueprint describes the necessary materials for producting an item.
type Blueprint struct {
	ItemId       int64          `protobuf:"varint,1,opt,name=item_id,json=itemId" json:"item_id,omitempty"`
	LocationId   int64          `protobuf:"varint,2,opt,name=location_id,json=locationId" json:"location_id,omitempty"`
	TypeId       int64          `protobuf:"varint,3,opt,name=type_id,json=typeId" json:"type_id,omitempty"`
	LocationFlag string         `protobuf:"bytes,4,opt,name=location_flag,json=locationFlag" json:"location_flag,omitempty"`
	FlagId       int64          `protobuf:"varint,6,opt,name=flag_id,json=flagId" json:"flag_id,omitempty"`
	TimeEff      int64          `protobuf:"varint,7,opt,name=time_eff,json=timeEff" json:"time_eff,omitempty"`
	MaterialEff  int64          `protobuf:"varint,8,opt,name=material_eff,json=materialEff" json:"material_eff,omitempty"`
	Kind         Blueprint_Kind `protobuf:"varint,9,opt,name=kind,enum=motki.model.Blueprint_Kind" json:"kind,omitempty"`
	Quantity     int64          `protobuf:"varint,10,opt,name=quantity" json:"quantity,omitempty"`
	Runs         int64          `protobuf:"varint,11,opt,name=runs" json:"runs,omitempty"`
}

func (m *Blueprint) Reset()                    { *m = Blueprint{} }
func (m *Blueprint) String() string            { return proto1.CompactTextString(m) }
func (*Blueprint) ProtoMessage()               {}
func (*Blueprint) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{26} }

func (m *Blueprint) GetItemId() int64 {
	if m != nil {
		return m.ItemId
	}
	return 0
}

func (m *Blueprint) GetLocationId() int64 {
	if m != nil {
		return m.LocationId
	}
	return 0
}

func (m *Blueprint) GetTypeId() int64 {
	if m != nil {
		return m.TypeId
	}
	return 0
}

func (m *Blueprint) GetLocationFlag() string {
	if m != nil {
		return m.LocationFlag
	}
	return ""
}

func (m *Blueprint) GetFlagId() int64 {
	if m != nil {
		return m.FlagId
	}
	return 0
}

func (m *Blueprint) GetTimeEff() int64 {
	if m != nil {
		return m.TimeEff
	}
	return 0
}

func (m *Blueprint) GetMaterialEff() int64 {
	if m != nil {
		return m.MaterialEff
	}
	return 0
}

func (m *Blueprint) GetKind() Blueprint_Kind {
	if m != nil {
		return m.Kind
	}
	return Blueprint_ORIGINAL
}

func (m *Blueprint) GetQuantity() int64 {
	if m != nil {
		return m.Quantity
	}
	return 0
}

func (m *Blueprint) GetRuns() int64 {
	if m != nil {
		return m.Runs
	}
	return 0
}

type GetCorpBlueprintsRequest struct {
	Token *Token `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (m *GetCorpBlueprintsRequest) Reset()                    { *m = GetCorpBlueprintsRequest{} }
func (m *GetCorpBlueprintsRequest) String() string            { return proto1.CompactTextString(m) }
func (*GetCorpBlueprintsRequest) ProtoMessage()               {}
func (*GetCorpBlueprintsRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{27} }

func (m *GetCorpBlueprintsRequest) GetToken() *Token {
	if m != nil {
		return m.Token
	}
	return nil
}

type GetCorpBlueprintsResponse struct {
	Result    *Result      `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	Blueprint []*Blueprint `protobuf:"bytes,2,rep,name=blueprint" json:"blueprint,omitempty"`
}

func (m *GetCorpBlueprintsResponse) Reset()                    { *m = GetCorpBlueprintsResponse{} }
func (m *GetCorpBlueprintsResponse) String() string            { return proto1.CompactTextString(m) }
func (*GetCorpBlueprintsResponse) ProtoMessage()               {}
func (*GetCorpBlueprintsResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{28} }

func (m *GetCorpBlueprintsResponse) GetResult() *Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *GetCorpBlueprintsResponse) GetBlueprint() []*Blueprint {
	if m != nil {
		return m.Blueprint
	}
	return nil
}

// InventoryItem is one item in an overall inventory.
type InventoryItem struct {
	TypeId       int64                      `protobuf:"varint,1,opt,name=type_id,json=typeId" json:"type_id,omitempty"`
	LocationId   int64                      `protobuf:"varint,2,opt,name=location_id,json=locationId" json:"location_id,omitempty"`
	CurrentLevel int64                      `protobuf:"varint,3,opt,name=current_level,json=currentLevel" json:"current_level,omitempty"`
	MinLevel     int64                      `protobuf:"varint,4,opt,name=min_level,json=minLevel" json:"min_level,omitempty"`
	FetchedAt    *google_protobuf.Timestamp `protobuf:"bytes,5,opt,name=fetched_at,json=fetchedAt" json:"fetched_at,omitempty"`
}

func (m *InventoryItem) Reset()                    { *m = InventoryItem{} }
func (m *InventoryItem) String() string            { return proto1.CompactTextString(m) }
func (*InventoryItem) ProtoMessage()               {}
func (*InventoryItem) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{29} }

func (m *InventoryItem) GetTypeId() int64 {
	if m != nil {
		return m.TypeId
	}
	return 0
}

func (m *InventoryItem) GetLocationId() int64 {
	if m != nil {
		return m.LocationId
	}
	return 0
}

func (m *InventoryItem) GetCurrentLevel() int64 {
	if m != nil {
		return m.CurrentLevel
	}
	return 0
}

func (m *InventoryItem) GetMinLevel() int64 {
	if m != nil {
		return m.MinLevel
	}
	return 0
}

func (m *InventoryItem) GetFetchedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.FetchedAt
	}
	return nil
}

type GetInventoryRequest struct {
	Token *Token `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (m *GetInventoryRequest) Reset()                    { *m = GetInventoryRequest{} }
func (m *GetInventoryRequest) String() string            { return proto1.CompactTextString(m) }
func (*GetInventoryRequest) ProtoMessage()               {}
func (*GetInventoryRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{30} }

func (m *GetInventoryRequest) GetToken() *Token {
	if m != nil {
		return m.Token
	}
	return nil
}

type GetInventoryResponse struct {
	Result *Result          `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	Item   []*InventoryItem `protobuf:"bytes,2,rep,name=item" json:"item,omitempty"`
}

func (m *GetInventoryResponse) Reset()                    { *m = GetInventoryResponse{} }
func (m *GetInventoryResponse) String() string            { return proto1.CompactTextString(m) }
func (*GetInventoryResponse) ProtoMessage()               {}
func (*GetInventoryResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{31} }

func (m *GetInventoryResponse) GetResult() *Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *GetInventoryResponse) GetItem() []*InventoryItem {
	if m != nil {
		return m.Item
	}
	return nil
}

type NewInventoryItemRequest struct {
	Token      *Token `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	TypeId     int64  `protobuf:"varint,2,opt,name=type_id,json=typeId" json:"type_id,omitempty"`
	LocationId int64  `protobuf:"varint,3,opt,name=location_id,json=locationId" json:"location_id,omitempty"`
}

func (m *NewInventoryItemRequest) Reset()                    { *m = NewInventoryItemRequest{} }
func (m *NewInventoryItemRequest) String() string            { return proto1.CompactTextString(m) }
func (*NewInventoryItemRequest) ProtoMessage()               {}
func (*NewInventoryItemRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{32} }

func (m *NewInventoryItemRequest) GetToken() *Token {
	if m != nil {
		return m.Token
	}
	return nil
}

func (m *NewInventoryItemRequest) GetTypeId() int64 {
	if m != nil {
		return m.TypeId
	}
	return 0
}

func (m *NewInventoryItemRequest) GetLocationId() int64 {
	if m != nil {
		return m.LocationId
	}
	return 0
}

type SaveInventoryItemRequest struct {
	Token *Token         `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	Item  *InventoryItem `protobuf:"bytes,2,opt,name=item" json:"item,omitempty"`
}

func (m *SaveInventoryItemRequest) Reset()                    { *m = SaveInventoryItemRequest{} }
func (m *SaveInventoryItemRequest) String() string            { return proto1.CompactTextString(m) }
func (*SaveInventoryItemRequest) ProtoMessage()               {}
func (*SaveInventoryItemRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{33} }

func (m *SaveInventoryItemRequest) GetToken() *Token {
	if m != nil {
		return m.Token
	}
	return nil
}

func (m *SaveInventoryItemRequest) GetItem() *InventoryItem {
	if m != nil {
		return m.Item
	}
	return nil
}

type InventoryItemResponse struct {
	Result *Result        `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	Item   *InventoryItem `protobuf:"bytes,2,opt,name=item" json:"item,omitempty"`
}

func (m *InventoryItemResponse) Reset()                    { *m = InventoryItemResponse{} }
func (m *InventoryItemResponse) String() string            { return proto1.CompactTextString(m) }
func (*InventoryItemResponse) ProtoMessage()               {}
func (*InventoryItemResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{34} }

func (m *InventoryItemResponse) GetResult() *Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *InventoryItemResponse) GetItem() *InventoryItem {
	if m != nil {
		return m.Item
	}
	return nil
}

// A Location is a location in the EVE universe.
type Location struct {
	Id            int64          `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	System        *System        `protobuf:"bytes,3,opt,name=system" json:"system,omitempty"`
	Constellation *Constellation `protobuf:"bytes,4,opt,name=constellation" json:"constellation,omitempty"`
	Region        *Region        `protobuf:"bytes,5,opt,name=region" json:"region,omitempty"`
	Station       *Station       `protobuf:"bytes,6,opt,name=station" json:"station,omitempty"`
	Structure     *Structure     `protobuf:"bytes,7,opt,name=structure" json:"structure,omitempty"`
}

func (m *Location) Reset()                    { *m = Location{} }
func (m *Location) String() string            { return proto1.CompactTextString(m) }
func (*Location) ProtoMessage()               {}
func (*Location) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{35} }

func (m *Location) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Location) GetSystem() *System {
	if m != nil {
		return m.System
	}
	return nil
}

func (m *Location) GetConstellation() *Constellation {
	if m != nil {
		return m.Constellation
	}
	return nil
}

func (m *Location) GetRegion() *Region {
	if m != nil {
		return m.Region
	}
	return nil
}

func (m *Location) GetStation() *Station {
	if m != nil {
		return m.Station
	}
	return nil
}

func (m *Location) GetStructure() *Structure {
	if m != nil {
		return m.Structure
	}
	return nil
}

type GetLocationRequest struct {
	Token      *Token `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	LocationId int64  `protobuf:"varint,2,opt,name=location_id,json=locationId" json:"location_id,omitempty"`
}

func (m *GetLocationRequest) Reset()                    { *m = GetLocationRequest{} }
func (m *GetLocationRequest) String() string            { return proto1.CompactTextString(m) }
func (*GetLocationRequest) ProtoMessage()               {}
func (*GetLocationRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{36} }

func (m *GetLocationRequest) GetToken() *Token {
	if m != nil {
		return m.Token
	}
	return nil
}

func (m *GetLocationRequest) GetLocationId() int64 {
	if m != nil {
		return m.LocationId
	}
	return 0
}

type LocationResponse struct {
	Result   *Result   `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	Location *Location `protobuf:"bytes,2,opt,name=location" json:"location,omitempty"`
}

func (m *LocationResponse) Reset()                    { *m = LocationResponse{} }
func (m *LocationResponse) String() string            { return proto1.CompactTextString(m) }
func (*LocationResponse) ProtoMessage()               {}
func (*LocationResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{37} }

func (m *LocationResponse) GetResult() *Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *LocationResponse) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

type QueryLocationsRequest struct {
	Token *Token `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	Query string `protobuf:"bytes,2,opt,name=query" json:"query,omitempty"`
}

func (m *QueryLocationsRequest) Reset()                    { *m = QueryLocationsRequest{} }
func (m *QueryLocationsRequest) String() string            { return proto1.CompactTextString(m) }
func (*QueryLocationsRequest) ProtoMessage()               {}
func (*QueryLocationsRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{38} }

func (m *QueryLocationsRequest) GetToken() *Token {
	if m != nil {
		return m.Token
	}
	return nil
}

func (m *QueryLocationsRequest) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

type LocationsResponse struct {
	Result   *Result     `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	Location []*Location `protobuf:"bytes,2,rep,name=location" json:"location,omitempty"`
}

func (m *LocationsResponse) Reset()                    { *m = LocationsResponse{} }
func (m *LocationsResponse) String() string            { return proto1.CompactTextString(m) }
func (*LocationsResponse) ProtoMessage()               {}
func (*LocationsResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{39} }

func (m *LocationsResponse) GetResult() *Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *LocationsResponse) GetLocation() []*Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func init() {
	proto1.RegisterType((*Character)(nil), "motki.model.Character")
	proto1.RegisterType((*Corporation)(nil), "motki.model.Corporation")
	proto1.RegisterType((*Alliance)(nil), "motki.model.Alliance")
	proto1.RegisterType((*Structure)(nil), "motki.model.Structure")
	proto1.RegisterType((*CorporationStructure)(nil), "motki.model.CorporationStructure")
	proto1.RegisterType((*GetCharacterRequest)(nil), "motki.model.GetCharacterRequest")
	proto1.RegisterType((*CharacterResponse)(nil), "motki.model.CharacterResponse")
	proto1.RegisterType((*GetCorporationRequest)(nil), "motki.model.GetCorporationRequest")
	proto1.RegisterType((*CorporationResponse)(nil), "motki.model.CorporationResponse")
	proto1.RegisterType((*GetAllianceRequest)(nil), "motki.model.GetAllianceRequest")
	proto1.RegisterType((*AllianceResponse)(nil), "motki.model.AllianceResponse")
	proto1.RegisterType((*GetStructureRequest)(nil), "motki.model.GetStructureRequest")
	proto1.RegisterType((*GetStructureResponse)(nil), "motki.model.GetStructureResponse")
	proto1.RegisterType((*GetCorpStructuresRequest)(nil), "motki.model.GetCorpStructuresRequest")
	proto1.RegisterType((*GetCorpStructuresResponse)(nil), "motki.model.GetCorpStructuresResponse")
	proto1.RegisterType((*Product)(nil), "motki.model.Product")
	proto1.RegisterType((*ProductResponse)(nil), "motki.model.ProductResponse")
	proto1.RegisterType((*GetProductRequest)(nil), "motki.model.GetProductRequest")
	proto1.RegisterType((*NewProductRequest)(nil), "motki.model.NewProductRequest")
	proto1.RegisterType((*SaveProductRequest)(nil), "motki.model.SaveProductRequest")
	proto1.RegisterType((*GetProductsRequest)(nil), "motki.model.GetProductsRequest")
	proto1.RegisterType((*UpdateProductPricesRequest)(nil), "motki.model.UpdateProductPricesRequest")
	proto1.RegisterType((*ProductsResponse)(nil), "motki.model.ProductsResponse")
	proto1.RegisterType((*MarketPrice)(nil), "motki.model.MarketPrice")
	proto1.RegisterType((*GetMarketPriceRequest)(nil), "motki.model.GetMarketPriceRequest")
	proto1.RegisterType((*GetMarketPriceResponse)(nil), "motki.model.GetMarketPriceResponse")
	proto1.RegisterType((*Blueprint)(nil), "motki.model.Blueprint")
	proto1.RegisterType((*GetCorpBlueprintsRequest)(nil), "motki.model.GetCorpBlueprintsRequest")
	proto1.RegisterType((*GetCorpBlueprintsResponse)(nil), "motki.model.GetCorpBlueprintsResponse")
	proto1.RegisterType((*InventoryItem)(nil), "motki.model.InventoryItem")
	proto1.RegisterType((*GetInventoryRequest)(nil), "motki.model.GetInventoryRequest")
	proto1.RegisterType((*GetInventoryResponse)(nil), "motki.model.GetInventoryResponse")
	proto1.RegisterType((*NewInventoryItemRequest)(nil), "motki.model.NewInventoryItemRequest")
	proto1.RegisterType((*SaveInventoryItemRequest)(nil), "motki.model.SaveInventoryItemRequest")
	proto1.RegisterType((*InventoryItemResponse)(nil), "motki.model.InventoryItemResponse")
	proto1.RegisterType((*Location)(nil), "motki.model.Location")
	proto1.RegisterType((*GetLocationRequest)(nil), "motki.model.GetLocationRequest")
	proto1.RegisterType((*LocationResponse)(nil), "motki.model.LocationResponse")
	proto1.RegisterType((*QueryLocationsRequest)(nil), "motki.model.QueryLocationsRequest")
	proto1.RegisterType((*LocationsResponse)(nil), "motki.model.LocationsResponse")
	proto1.RegisterEnum("motki.model.Role", Role_name, Role_value)
	proto1.RegisterEnum("motki.model.Product_Kind", Product_Kind_name, Product_Kind_value)
	proto1.RegisterEnum("motki.model.Blueprint_Kind", Blueprint_Kind_name, Blueprint_Kind_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for InfoService service

type InfoServiceClient interface {
	// GetCharacter returns information about a specific character.
	GetCharacter(ctx context.Context, in *GetCharacterRequest, opts ...grpc.CallOption) (*CharacterResponse, error)
	// GetCorporation returns information about a specific corporation.
	GetCorporation(ctx context.Context, in *GetCorporationRequest, opts ...grpc.CallOption) (*CorporationResponse, error)
	// GetAlliance returns information about a specific alliance.
	GetAlliance(ctx context.Context, in *GetAllianceRequest, opts ...grpc.CallOption) (*AllianceResponse, error)
	// GetStructure returns basic information about a specific structure.
	GetStructure(ctx context.Context, in *GetStructureRequest, opts ...grpc.CallOption) (*GetStructureResponse, error)
}

type infoServiceClient struct {
	cc *grpc.ClientConn
}

func NewInfoServiceClient(cc *grpc.ClientConn) InfoServiceClient {
	return &infoServiceClient{cc}
}

func (c *infoServiceClient) GetCharacter(ctx context.Context, in *GetCharacterRequest, opts ...grpc.CallOption) (*CharacterResponse, error) {
	out := new(CharacterResponse)
	err := grpc.Invoke(ctx, "/motki.model.InfoService/GetCharacter", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServiceClient) GetCorporation(ctx context.Context, in *GetCorporationRequest, opts ...grpc.CallOption) (*CorporationResponse, error) {
	out := new(CorporationResponse)
	err := grpc.Invoke(ctx, "/motki.model.InfoService/GetCorporation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServiceClient) GetAlliance(ctx context.Context, in *GetAllianceRequest, opts ...grpc.CallOption) (*AllianceResponse, error) {
	out := new(AllianceResponse)
	err := grpc.Invoke(ctx, "/motki.model.InfoService/GetAlliance", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServiceClient) GetStructure(ctx context.Context, in *GetStructureRequest, opts ...grpc.CallOption) (*GetStructureResponse, error) {
	out := new(GetStructureResponse)
	err := grpc.Invoke(ctx, "/motki.model.InfoService/GetStructure", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for InfoService service

type InfoServiceServer interface {
	// GetCharacter returns information about a specific character.
	GetCharacter(context.Context, *GetCharacterRequest) (*CharacterResponse, error)
	// GetCorporation returns information about a specific corporation.
	GetCorporation(context.Context, *GetCorporationRequest) (*CorporationResponse, error)
	// GetAlliance returns information about a specific alliance.
	GetAlliance(context.Context, *GetAllianceRequest) (*AllianceResponse, error)
	// GetStructure returns basic information about a specific structure.
	GetStructure(context.Context, *GetStructureRequest) (*GetStructureResponse, error)
}

func RegisterInfoServiceServer(s *grpc.Server, srv InfoServiceServer) {
	s.RegisterService(&_InfoService_serviceDesc, srv)
}

func _InfoService_GetCharacter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCharacterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServiceServer).GetCharacter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/motki.model.InfoService/GetCharacter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServiceServer).GetCharacter(ctx, req.(*GetCharacterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoService_GetCorporation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCorporationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServiceServer).GetCorporation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/motki.model.InfoService/GetCorporation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServiceServer).GetCorporation(ctx, req.(*GetCorporationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoService_GetAlliance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllianceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServiceServer).GetAlliance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/motki.model.InfoService/GetAlliance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServiceServer).GetAlliance(ctx, req.(*GetAllianceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoService_GetStructure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStructureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServiceServer).GetStructure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/motki.model.InfoService/GetStructure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServiceServer).GetStructure(ctx, req.(*GetStructureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _InfoService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "motki.model.InfoService",
	HandlerType: (*InfoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCharacter",
			Handler:    _InfoService_GetCharacter_Handler,
		},
		{
			MethodName: "GetCorporation",
			Handler:    _InfoService_GetCorporation_Handler,
		},
		{
			MethodName: "GetAlliance",
			Handler:    _InfoService_GetAlliance_Handler,
		},
		{
			MethodName: "GetStructure",
			Handler:    _InfoService_GetStructure_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "model.proto",
}

// Client API for ProductService service

type ProductServiceClient interface {
	// GetProducts returns all root-level products for a corporation.
	GetProducts(ctx context.Context, in *GetProductsRequest, opts ...grpc.CallOption) (*ProductsResponse, error)
	// GetProduct returns a specific root-level product.
	GetProduct(ctx context.Context, in *GetProductRequest, opts ...grpc.CallOption) (*ProductResponse, error)
	// NewProduct creates and returns a new production chain for a specific type.
	NewProduct(ctx context.Context, in *NewProductRequest, opts ...grpc.CallOption) (*ProductResponse, error)
	// SaveProduct persists changes to a production chain to the server.
	SaveProduct(ctx context.Context, in *SaveProductRequest, opts ...grpc.CallOption) (*ProductResponse, error)
	// UpdateProductPrices fetches and populates the latest market price for
	// the entire production chain.
	UpdateProductPrices(ctx context.Context, in *UpdateProductPricesRequest, opts ...grpc.CallOption) (*ProductResponse, error)
}

type productServiceClient struct {
	cc *grpc.ClientConn
}

func NewProductServiceClient(cc *grpc.ClientConn) ProductServiceClient {
	return &productServiceClient{cc}
}

func (c *productServiceClient) GetProducts(ctx context.Context, in *GetProductsRequest, opts ...grpc.CallOption) (*ProductsResponse, error) {
	out := new(ProductsResponse)
	err := grpc.Invoke(ctx, "/motki.model.ProductService/GetProducts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetProduct(ctx context.Context, in *GetProductRequest, opts ...grpc.CallOption) (*ProductResponse, error) {
	out := new(ProductResponse)
	err := grpc.Invoke(ctx, "/motki.model.ProductService/GetProduct", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) NewProduct(ctx context.Context, in *NewProductRequest, opts ...grpc.CallOption) (*ProductResponse, error) {
	out := new(ProductResponse)
	err := grpc.Invoke(ctx, "/motki.model.ProductService/NewProduct", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) SaveProduct(ctx context.Context, in *SaveProductRequest, opts ...grpc.CallOption) (*ProductResponse, error) {
	out := new(ProductResponse)
	err := grpc.Invoke(ctx, "/motki.model.ProductService/SaveProduct", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) UpdateProductPrices(ctx context.Context, in *UpdateProductPricesRequest, opts ...grpc.CallOption) (*ProductResponse, error) {
	out := new(ProductResponse)
	err := grpc.Invoke(ctx, "/motki.model.ProductService/UpdateProductPrices", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ProductService service

type ProductServiceServer interface {
	// GetProducts returns all root-level products for a corporation.
	GetProducts(context.Context, *GetProductsRequest) (*ProductsResponse, error)
	// GetProduct returns a specific root-level product.
	GetProduct(context.Context, *GetProductRequest) (*ProductResponse, error)
	// NewProduct creates and returns a new production chain for a specific type.
	NewProduct(context.Context, *NewProductRequest) (*ProductResponse, error)
	// SaveProduct persists changes to a production chain to the server.
	SaveProduct(context.Context, *SaveProductRequest) (*ProductResponse, error)
	// UpdateProductPrices fetches and populates the latest market price for
	// the entire production chain.
	UpdateProductPrices(context.Context, *UpdateProductPricesRequest) (*ProductResponse, error)
}

func RegisterProductServiceServer(s *grpc.Server, srv ProductServiceServer) {
	s.RegisterService(&_ProductService_serviceDesc, srv)
}

func _ProductService_GetProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/motki.model.ProductService/GetProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetProducts(ctx, req.(*GetProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/motki.model.ProductService/GetProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetProduct(ctx, req.(*GetProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_NewProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).NewProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/motki.model.ProductService/NewProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).NewProduct(ctx, req.(*NewProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_SaveProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).SaveProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/motki.model.ProductService/SaveProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).SaveProduct(ctx, req.(*SaveProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_UpdateProductPrices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductPricesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).UpdateProductPrices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/motki.model.ProductService/UpdateProductPrices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).UpdateProductPrices(ctx, req.(*UpdateProductPricesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ProductService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "motki.model.ProductService",
	HandlerType: (*ProductServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProducts",
			Handler:    _ProductService_GetProducts_Handler,
		},
		{
			MethodName: "GetProduct",
			Handler:    _ProductService_GetProduct_Handler,
		},
		{
			MethodName: "NewProduct",
			Handler:    _ProductService_NewProduct_Handler,
		},
		{
			MethodName: "SaveProduct",
			Handler:    _ProductService_SaveProduct_Handler,
		},
		{
			MethodName: "UpdateProductPrices",
			Handler:    _ProductService_UpdateProductPrices_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "model.proto",
}

// Client API for MarketPriceService service

type MarketPriceServiceClient interface {
	// GetMarketPrice returns the current market price for a specific type.
	GetMarketPrice(ctx context.Context, in *GetMarketPriceRequest, opts ...grpc.CallOption) (*GetMarketPriceResponse, error)
}

type marketPriceServiceClient struct {
	cc *grpc.ClientConn
}

func NewMarketPriceServiceClient(cc *grpc.ClientConn) MarketPriceServiceClient {
	return &marketPriceServiceClient{cc}
}

func (c *marketPriceServiceClient) GetMarketPrice(ctx context.Context, in *GetMarketPriceRequest, opts ...grpc.CallOption) (*GetMarketPriceResponse, error) {
	out := new(GetMarketPriceResponse)
	err := grpc.Invoke(ctx, "/motki.model.MarketPriceService/GetMarketPrice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MarketPriceService service

type MarketPriceServiceServer interface {
	// GetMarketPrice returns the current market price for a specific type.
	GetMarketPrice(context.Context, *GetMarketPriceRequest) (*GetMarketPriceResponse, error)
}

func RegisterMarketPriceServiceServer(s *grpc.Server, srv MarketPriceServiceServer) {
	s.RegisterService(&_MarketPriceService_serviceDesc, srv)
}

func _MarketPriceService_GetMarketPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMarketPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketPriceServiceServer).GetMarketPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/motki.model.MarketPriceService/GetMarketPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketPriceServiceServer).GetMarketPrice(ctx, req.(*GetMarketPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MarketPriceService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "motki.model.MarketPriceService",
	HandlerType: (*MarketPriceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMarketPrice",
			Handler:    _MarketPriceService_GetMarketPrice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "model.proto",
}

// Client API for CorporationService service

type CorporationServiceClient interface {
	// GetCorpStructures returns detailed information about corporation-owned structures.
	GetCorpStructures(ctx context.Context, in *GetCorpStructuresRequest, opts ...grpc.CallOption) (*GetCorpStructuresResponse, error)
	// GetCorpBlueprints returns all corporation-owned blueprints.
	GetCorpBlueprints(ctx context.Context, in *GetCorpBlueprintsRequest, opts ...grpc.CallOption) (*GetCorpBlueprintsResponse, error)
}

type corporationServiceClient struct {
	cc *grpc.ClientConn
}

func NewCorporationServiceClient(cc *grpc.ClientConn) CorporationServiceClient {
	return &corporationServiceClient{cc}
}

func (c *corporationServiceClient) GetCorpStructures(ctx context.Context, in *GetCorpStructuresRequest, opts ...grpc.CallOption) (*GetCorpStructuresResponse, error) {
	out := new(GetCorpStructuresResponse)
	err := grpc.Invoke(ctx, "/motki.model.CorporationService/GetCorpStructures", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *corporationServiceClient) GetCorpBlueprints(ctx context.Context, in *GetCorpBlueprintsRequest, opts ...grpc.CallOption) (*GetCorpBlueprintsResponse, error) {
	out := new(GetCorpBlueprintsResponse)
	err := grpc.Invoke(ctx, "/motki.model.CorporationService/GetCorpBlueprints", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CorporationService service

type CorporationServiceServer interface {
	// GetCorpStructures returns detailed information about corporation-owned structures.
	GetCorpStructures(context.Context, *GetCorpStructuresRequest) (*GetCorpStructuresResponse, error)
	// GetCorpBlueprints returns all corporation-owned blueprints.
	GetCorpBlueprints(context.Context, *GetCorpBlueprintsRequest) (*GetCorpBlueprintsResponse, error)
}

func RegisterCorporationServiceServer(s *grpc.Server, srv CorporationServiceServer) {
	s.RegisterService(&_CorporationService_serviceDesc, srv)
}

func _CorporationService_GetCorpStructures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCorpStructuresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CorporationServiceServer).GetCorpStructures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/motki.model.CorporationService/GetCorpStructures",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CorporationServiceServer).GetCorpStructures(ctx, req.(*GetCorpStructuresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CorporationService_GetCorpBlueprints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCorpBlueprintsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CorporationServiceServer).GetCorpBlueprints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/motki.model.CorporationService/GetCorpBlueprints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CorporationServiceServer).GetCorpBlueprints(ctx, req.(*GetCorpBlueprintsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CorporationService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "motki.model.CorporationService",
	HandlerType: (*CorporationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCorpStructures",
			Handler:    _CorporationService_GetCorpStructures_Handler,
		},
		{
			MethodName: "GetCorpBlueprints",
			Handler:    _CorporationService_GetCorpBlueprints_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "model.proto",
}

// Client API for InventoryService service

type InventoryServiceClient interface {
	// GetInventory returns all inventory items for a corporation.
	GetInventory(ctx context.Context, in *GetInventoryRequest, opts ...grpc.CallOption) (*GetInventoryResponse, error)
	// NewInventoryItem creates a new inventory item for a specific type.
	NewInventoryItem(ctx context.Context, in *NewInventoryItemRequest, opts ...grpc.CallOption) (*InventoryItemResponse, error)
	// SaveInventoryItem persists changes to a given inventory item on the server.
	SaveInventoryItem(ctx context.Context, in *SaveInventoryItemRequest, opts ...grpc.CallOption) (*InventoryItemResponse, error)
}

type inventoryServiceClient struct {
	cc *grpc.ClientConn
}

func NewInventoryServiceClient(cc *grpc.ClientConn) InventoryServiceClient {
	return &inventoryServiceClient{cc}
}

func (c *inventoryServiceClient) GetInventory(ctx context.Context, in *GetInventoryRequest, opts ...grpc.CallOption) (*GetInventoryResponse, error) {
	out := new(GetInventoryResponse)
	err := grpc.Invoke(ctx, "/motki.model.InventoryService/GetInventory", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) NewInventoryItem(ctx context.Context, in *NewInventoryItemRequest, opts ...grpc.CallOption) (*InventoryItemResponse, error) {
	out := new(InventoryItemResponse)
	err := grpc.Invoke(ctx, "/motki.model.InventoryService/NewInventoryItem", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) SaveInventoryItem(ctx context.Context, in *SaveInventoryItemRequest, opts ...grpc.CallOption) (*InventoryItemResponse, error) {
	out := new(InventoryItemResponse)
	err := grpc.Invoke(ctx, "/motki.model.InventoryService/SaveInventoryItem", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for InventoryService service

type InventoryServiceServer interface {
	// GetInventory returns all inventory items for a corporation.
	GetInventory(context.Context, *GetInventoryRequest) (*GetInventoryResponse, error)
	// NewInventoryItem creates a new inventory item for a specific type.
	NewInventoryItem(context.Context, *NewInventoryItemRequest) (*InventoryItemResponse, error)
	// SaveInventoryItem persists changes to a given inventory item on the server.
	SaveInventoryItem(context.Context, *SaveInventoryItemRequest) (*InventoryItemResponse, error)
}

func RegisterInventoryServiceServer(s *grpc.Server, srv InventoryServiceServer) {
	s.RegisterService(&_InventoryService_serviceDesc, srv)
}

func _InventoryService_GetInventory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInventoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).GetInventory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/motki.model.InventoryService/GetInventory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).GetInventory(ctx, req.(*GetInventoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_NewInventoryItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewInventoryItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).NewInventoryItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/motki.model.InventoryService/NewInventoryItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).NewInventoryItem(ctx, req.(*NewInventoryItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_SaveInventoryItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveInventoryItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).SaveInventoryItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/motki.model.InventoryService/SaveInventoryItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).SaveInventoryItem(ctx, req.(*SaveInventoryItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _InventoryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "motki.model.InventoryService",
	HandlerType: (*InventoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInventory",
			Handler:    _InventoryService_GetInventory_Handler,
		},
		{
			MethodName: "NewInventoryItem",
			Handler:    _InventoryService_NewInventoryItem_Handler,
		},
		{
			MethodName: "SaveInventoryItem",
			Handler:    _InventoryService_SaveInventoryItem_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "model.proto",
}

// Client API for LocationService service

type LocationServiceClient interface {
	// GetLocation returns information about a specific location ID.
	GetLocation(ctx context.Context, in *GetLocationRequest, opts ...grpc.CallOption) (*LocationResponse, error)
	// QueryLocations returns locations that match the input query.
	QueryLocations(ctx context.Context, in *QueryLocationsRequest, opts ...grpc.CallOption) (*LocationsResponse, error)
}

type locationServiceClient struct {
	cc *grpc.ClientConn
}

func NewLocationServiceClient(cc *grpc.ClientConn) LocationServiceClient {
	return &locationServiceClient{cc}
}

func (c *locationServiceClient) GetLocation(ctx context.Context, in *GetLocationRequest, opts ...grpc.CallOption) (*LocationResponse, error) {
	out := new(LocationResponse)
	err := grpc.Invoke(ctx, "/motki.model.LocationService/GetLocation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationServiceClient) QueryLocations(ctx context.Context, in *QueryLocationsRequest, opts ...grpc.CallOption) (*LocationsResponse, error) {
	out := new(LocationsResponse)
	err := grpc.Invoke(ctx, "/motki.model.LocationService/QueryLocations", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for LocationService service

type LocationServiceServer interface {
	// GetLocation returns information about a specific location ID.
	GetLocation(context.Context, *GetLocationRequest) (*LocationResponse, error)
	// QueryLocations returns locations that match the input query.
	QueryLocations(context.Context, *QueryLocationsRequest) (*LocationsResponse, error)
}

func RegisterLocationServiceServer(s *grpc.Server, srv LocationServiceServer) {
	s.RegisterService(&_LocationService_serviceDesc, srv)
}

func _LocationService_GetLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).GetLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/motki.model.LocationService/GetLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).GetLocation(ctx, req.(*GetLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationService_QueryLocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLocationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).QueryLocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/motki.model.LocationService/QueryLocations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).QueryLocations(ctx, req.(*QueryLocationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LocationService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "motki.model.LocationService",
	HandlerType: (*LocationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLocation",
			Handler:    _LocationService_GetLocation_Handler,
		},
		{
			MethodName: "QueryLocations",
			Handler:    _LocationService_QueryLocations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "model.proto",
}

func init() { proto1.RegisterFile("model.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 2081 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x18, 0xdb, 0x72, 0x23, 0x47,
	0x35, 0xa3, 0x9b, 0xa5, 0x33, 0xb2, 0x23, 0xb7, 0xed, 0x8d, 0x56, 0x21, 0xbb, 0xde, 0x59, 0x16,
	0x0c, 0x54, 0x64, 0x50, 0xa8, 0x22, 0x1b, 0x8a, 0x8b, 0xd7, 0x71, 0xcc, 0x80, 0xe3, 0x75, 0x46,
	0x5e, 0xa8, 0xa5, 0xb6, 0x70, 0x8d, 0x66, 0x5a, 0xf6, 0x94, 0x47, 0x33, 0xda, 0x9e, 0x1e, 0xef,
	0x2a, 0xaf, 0x54, 0x3e, 0x82, 0x2a, 0xde, 0x28, 0x3e, 0x80, 0x17, 0x3e, 0x81, 0x37, 0xbe, 0x20,
	0xf0, 0x2f, 0x54, 0x5f, 0xe6, 0x2e, 0x59, 0x1a, 0x07, 0x78, 0x92, 0xe6, 0xdc, 0xfa, 0x9c, 0xd3,
	0xa7, 0xcf, 0x0d, 0xd4, 0x89, 0x6f, 0x63, 0xb7, 0x3f, 0x25, 0x3e, 0xf5, 0x91, 0x3a, 0xf1, 0xe9,
	0xb5, 0xd3, 0xe7, 0xa0, 0xde, 0xc3, 0x4b, 0xdf, 0xbf, 0x74, 0xf1, 0x3e, 0x47, 0x8d, 0xc2, 0xf1,
	0x3e, 0x75, 0x26, 0x38, 0xa0, 0xe6, 0x64, 0x2a, 0xa8, 0x7b, 0x92, 0x5a, 0x7e, 0xe0, 0x1b, 0x6c,
	0x8f, 0xc4, 0x87, 0xf6, 0xb7, 0x0a, 0xb4, 0x0e, 0xaf, 0x4c, 0x62, 0x5a, 0x14, 0x13, 0xb4, 0x01,
	0x15, 0xc7, 0xee, 0x2a, 0xbb, 0xca, 0x5e, 0xd5, 0xa8, 0x38, 0x36, 0x7a, 0x02, 0x1b, 0x96, 0x4f,
	0xa6, 0x3e, 0x31, 0xa9, 0xe3, 0x7b, 0x17, 0x8e, 0xdd, 0xad, 0x70, 0xdc, 0x7a, 0x0a, 0xaa, 0xdb,
	0xe8, 0x21, 0xa8, 0xa6, 0xeb, 0x3a, 0xa6, 0x67, 0x61, 0x46, 0x53, 0xe5, 0x34, 0x10, 0x81, 0x74,
	0x1b, 0x21, 0xa8, 0x79, 0xe6, 0x04, 0x77, 0x6b, 0xbb, 0xca, 0x5e, 0xcb, 0xe0, 0xff, 0xd1, 0x23,
	0x68, 0x8f, 0x5c, 0xdf, 0xb7, 0x5d, 0xc7, 0xe3, 0x5c, 0xf5, 0x5d, 0x65, 0xaf, 0x6e, 0xa8, 0x31,
	0x4c, 0xb7, 0xd1, 0x7b, 0xb0, 0x46, 0x4c, 0x21, 0xb3, 0xc1, 0xb1, 0x0d, 0xf6, 0x29, 0x0f, 0xf4,
	0x2c, 0x1c, 0x50, 0x32, 0x63, 0xc8, 0x35, 0x8e, 0x84, 0x08, 0xa4, 0xdb, 0xe8, 0x29, 0xc0, 0xc8,
	0x21, 0xf4, 0xea, 0xc2, 0x36, 0x29, 0xee, 0x36, 0x77, 0x95, 0x3d, 0x75, 0xd0, 0xeb, 0x0b, 0x37,
	0xf5, 0x23, 0x37, 0xf5, 0xcf, 0x23, 0x37, 0x19, 0x2d, 0x4e, 0xfd, 0xa9, 0x49, 0x31, 0xda, 0x05,
	0xd5, 0xc6, 0x81, 0x45, 0x9c, 0x29, 0xb3, 0xae, 0xdb, 0xe2, 0x2a, 0xa7, 0x41, 0xda, 0x3f, 0x15,
	0x50, 0x0f, 0x13, 0x07, 0x14, 0xbc, 0x96, 0x73, 0x47, 0x65, 0xa1, 0x3b, 0xaa, 0x29, 0x77, 0xfc,
	0x02, 0xd6, 0x2d, 0x82, 0x85, 0x9f, 0xb9, 0xd2, 0xb5, 0xa5, 0x4a, 0xb7, 0x23, 0x86, 0x79, 0x7a,
	0xd7, 0x0b, 0x7a, 0xa3, 0x7b, 0xd0, 0xa0, 0x8e, 0x75, 0x8d, 0x09, 0xf7, 0x66, 0xcb, 0x90, 0x5f,
	0xda, 0x57, 0x0a, 0x34, 0x0f, 0xa4, 0x76, 0x05, 0x63, 0x22, 0x5d, 0x2b, 0x29, 0x5d, 0x7f, 0x06,
	0x6d, 0xa6, 0xe2, 0xc5, 0xd8, 0x0f, 0x3d, 0x1b, 0x8b, 0x0b, 0xbf, 0x5d, 0x55, 0x95, 0xd1, 0x7f,
	0x26, 0xc8, 0x53, 0x7a, 0xd4, 0x32, 0x7a, 0x60, 0x68, 0x0d, 0x29, 0x09, 0x2d, 0x1a, 0x92, 0xd5,
	0xf4, 0x78, 0x1f, 0x5a, 0xc1, 0x2c, 0xa0, 0x78, 0x92, 0x44, 0x5d, 0x53, 0x00, 0x44, 0xf0, 0xd0,
	0xd9, 0x94, 0xdf, 0x40, 0x8d, 0xa3, 0x1a, 0xec, 0x53, 0xb7, 0xb5, 0x3f, 0xd5, 0x60, 0x3b, 0x75,
	0x7d, 0xff, 0x87, 0x23, 0xd1, 0x07, 0x00, 0x53, 0xe2, 0x8f, 0x1d, 0x37, 0x8e, 0xf4, 0xaa, 0xd1,
	0x92, 0x10, 0xdd, 0x46, 0x3d, 0x68, 0x06, 0x98, 0xdc, 0x38, 0x16, 0x0e, 0xba, 0x8d, 0xdd, 0xea,
	0x5e, 0xcb, 0x88, 0xbf, 0x99, 0xaf, 0xc7, 0x21, 0x76, 0x2f, 0xf0, 0xdb, 0xa9, 0x43, 0x70, 0xc0,
	0x63, 0x7d, 0x89, 0xaf, 0x19, 0xfd, 0x91, 0x20, 0x47, 0x3f, 0x05, 0x35, 0xa0, 0xec, 0xae, 0x02,
	0x6a, 0x12, 0xba, 0xc2, 0x4b, 0x00, 0x4e, 0x3e, 0x64, 0xd4, 0xe8, 0x27, 0xd0, 0x12, 0xcc, 0xd8,
	0xb3, 0xf9, 0x43, 0xb8, 0x9d, 0xb5, 0xc9, 0x89, 0x8f, 0x3c, 0x9b, 0x29, 0x1d, 0x7a, 0xa6, 0x67,
	0x5d, 0xf9, 0x24, 0xb8, 0x30, 0x69, 0x17, 0x96, 0x2b, 0x1d, 0xd3, 0x1f, 0x50, 0xf4, 0x11, 0xec,
	0xdc, 0x84, 0xae, 0x87, 0x89, 0x39, 0x72, 0x5c, 0x87, 0xce, 0x2e, 0xde, 0x60, 0x7c, 0x6d, 0x9b,
	0xb3, 0xae, 0xca, 0x3d, 0xb7, 0x9d, 0x41, 0xfe, 0x4e, 0xe0, 0xd0, 0x87, 0x80, 0xb2, 0x4c, 0x57,
	0x7e, 0x48, 0xba, 0x6d, 0xce, 0xb1, 0x99, 0xc1, 0xfc, 0xca, 0x0f, 0x09, 0xda, 0x86, 0x3a, 0x57,
	0xb7, 0xbb, 0xce, 0x6f, 0x57, 0x7c, 0x68, 0x7f, 0x54, 0x60, 0xeb, 0x18, 0xd3, 0x38, 0x23, 0x1a,
	0xf8, 0x75, 0x88, 0x03, 0x8a, 0x34, 0xa8, 0x53, 0xff, 0x1a, 0x7b, 0x3c, 0x3a, 0xd4, 0x41, 0xbb,
	0x2f, 0x12, 0xea, 0x39, 0x83, 0x19, 0x02, 0x85, 0x9e, 0x40, 0x8d, 0xf8, 0xae, 0x08, 0x97, 0x8d,
	0xc1, 0x66, 0x3f, 0x95, 0xa1, 0xfb, 0x86, 0xef, 0x62, 0x83, 0xa3, 0x59, 0xde, 0xb3, 0x22, 0xf1,
	0x49, 0x10, 0xa9, 0x31, 0x4c, 0xb7, 0xb5, 0x29, 0x6c, 0xa6, 0x34, 0x08, 0xa6, 0xbe, 0x17, 0x60,
	0xf4, 0x04, 0x1a, 0x04, 0x07, 0xa1, 0x4b, 0xa5, 0x0e, 0xeb, 0xf2, 0x00, 0x83, 0x03, 0x0d, 0x89,
	0x44, 0x3f, 0x86, 0x56, 0x2c, 0x8a, 0xab, 0xa2, 0x0e, 0xee, 0x65, 0x54, 0x49, 0x24, 0x27, 0x84,
	0xda, 0x08, 0x76, 0x98, 0xd9, 0xc9, 0xab, 0x28, 0x67, 0xf8, 0x2a, 0x55, 0x42, 0x7b, 0x0b, 0x5b,
	0x99, 0x03, 0xca, 0xd9, 0xf5, 0x09, 0xa8, 0x29, 0x71, 0xd2, 0xb2, 0x6e, 0xd6, 0xb2, 0x94, 0xf4,
	0x34, 0xb1, 0xf6, 0x12, 0xd0, 0x31, 0xa6, 0x51, 0x8a, 0x2b, 0x63, 0xda, 0xb2, 0x54, 0xae, 0xb9,
	0xd0, 0x49, 0xe4, 0x96, 0xb3, 0xe8, 0x47, 0xd0, 0x8c, 0x04, 0x49, 0x73, 0x76, 0x32, 0xe6, 0xc4,
	0x72, 0x63, 0x32, 0xed, 0x15, 0x8f, 0xce, 0x38, 0x63, 0x95, 0xb1, 0xe4, 0x11, 0xb4, 0x83, 0x88,
	0x2f, 0x31, 0x45, 0x8d, 0x61, 0xba, 0xad, 0x05, 0xb0, 0x9d, 0x95, 0x5e, 0x3a, 0xf2, 0x62, 0x69,
	0x73, 0x23, 0x2f, 0x91, 0x9c, 0x10, 0x6a, 0x3f, 0x87, 0xae, 0x8c, 0xbc, 0x18, 0x1d, 0x94, 0xb0,
	0x8b, 0x15, 0xaf, 0xfb, 0x73, 0x04, 0x94, 0x53, 0xfd, 0x00, 0x20, 0xd6, 0x28, 0xe8, 0x56, 0x76,
	0xab, 0x7b, 0xea, 0xe0, 0xd1, 0xa2, 0xd8, 0x4a, 0xcc, 0x48, 0x31, 0x69, 0x5f, 0x55, 0x61, 0xed,
	0x8c, 0xf8, 0x76, 0x68, 0xd1, 0x54, 0x21, 0xa9, 0xf3, 0x42, 0x92, 0xaa, 0x0b, 0x95, 0x4c, 0x5d,
	0xe8, 0x41, 0xf3, 0x75, 0x68, 0x7a, 0xd4, 0xa1, 0x33, 0x9e, 0x07, 0xea, 0x46, 0xfc, 0xcd, 0x2e,
	0x6c, 0x62, 0x92, 0x6b, 0x4c, 0x2f, 0xa6, 0xc4, 0xb1, 0x44, 0x3f, 0xa0, 0x18, 0xaa, 0x80, 0x9d,
	0x31, 0x10, 0xda, 0x83, 0x8e, 0x24, 0x21, 0xf8, 0x52, 0x3e, 0x3d, 0xd1, 0x46, 0x6d, 0x08, 0xb8,
	0xc1, 0xc1, 0xba, 0x8d, 0xf6, 0x61, 0x6b, 0x62, 0x52, 0x4c, 0x1c, 0xd3, 0xbd, 0xc0, 0xe3, 0xb1,
	0x63, 0x39, 0xd8, 0xb3, 0x66, 0xbc, 0x0f, 0x50, 0x0c, 0x14, 0xa1, 0x8e, 0x62, 0x0c, 0xab, 0x58,
	0x23, 0x93, 0x5a, 0x57, 0x17, 0x81, 0xf3, 0x25, 0x96, 0x0d, 0x56, 0x8b, 0x43, 0x86, 0xce, 0x97,
	0x18, 0x7d, 0x08, 0xb5, 0x6b, 0xc7, 0xb3, 0x79, 0x3d, 0xd9, 0x18, 0xdc, 0xcf, 0xb8, 0x4a, 0x7a,
	0xa1, 0xff, 0x1b, 0xc7, 0xb3, 0x0d, 0x4e, 0xc6, 0xaa, 0xe6, 0xd4, 0x24, 0xd8, 0xa3, 0x4c, 0xc3,
	0x96, 0x30, 0x54, 0x00, 0x74, 0x1b, 0xfd, 0x10, 0x9a, 0x91, 0x02, 0x5d, 0xe0, 0xae, 0xdf, 0x9e,
	0x27, 0xcf, 0x88, 0xa9, 0xb4, 0x1e, 0xd4, 0x98, 0x70, 0xb4, 0x06, 0xd5, 0x67, 0x2f, 0x5e, 0x76,
	0xde, 0x41, 0x2d, 0xa8, 0x3f, 0x7b, 0xa1, 0x9f, 0x7c, 0xda, 0x51, 0xb4, 0x2b, 0x78, 0x37, 0x62,
	0x28, 0x19, 0x04, 0x7d, 0x58, 0x9b, 0x0a, 0x4e, 0x19, 0xbd, 0xf3, 0xd5, 0x88, 0x88, 0xb4, 0x63,
	0xd8, 0x3c, 0x66, 0x37, 0x21, 0x0f, 0x5b, 0xfd, 0x29, 0x8a, 0xf0, 0xa8, 0x44, 0xe1, 0xa1, 0x9d,
	0xc1, 0xe6, 0x29, 0x7e, 0x73, 0x07, 0x41, 0x8b, 0xe2, 0x4a, 0xbb, 0x02, 0x34, 0x34, 0x6f, 0xf0,
	0x1d, 0x44, 0x96, 0x75, 0xc2, 0xc7, 0x3c, 0xb5, 0x4a, 0x70, 0xa9, 0x87, 0x3b, 0x85, 0xde, 0x8b,
	0x29, 0x6b, 0x0b, 0x25, 0x33, 0x0f, 0xe9, 0xe0, 0x7f, 0xa9, 0xab, 0x03, 0x9d, 0x44, 0xd1, 0x6f,
	0x10, 0x1b, 0xd5, 0xe5, 0x47, 0x9d, 0x83, 0xfa, 0x79, 0xea, 0xa1, 0xa6, 0x2e, 0x4a, 0xc9, 0x24,
	0x80, 0x2e, 0xac, 0x99, 0x37, 0x98, 0x98, 0x97, 0x22, 0x63, 0x2a, 0x46, 0xf4, 0xc9, 0x9a, 0xcf,
	0x91, 0x19, 0x88, 0x19, 0x41, 0x31, 0xf8, 0x7f, 0xed, 0x9c, 0x57, 0xe9, 0x94, 0xe0, 0x3b, 0x07,
	0x4b, 0x35, 0x15, 0x2c, 0xff, 0x56, 0xe0, 0x5e, 0x5e, 0x6c, 0x39, 0xef, 0x1c, 0x43, 0x83, 0xe7,
	0xa8, 0x28, 0x75, 0xee, 0x67, 0x9c, 0x33, 0x5f, 0x76, 0x5f, 0xdc, 0xf7, 0x91, 0x47, 0xc9, 0xcc,
	0x90, 0xec, 0xbd, 0x21, 0xa8, 0x29, 0x30, 0xea, 0x40, 0xf5, 0x1a, 0xcf, 0xa4, 0xcb, 0xd8, 0x5f,
	0xd4, 0x87, 0xfa, 0x8d, 0xe9, 0x86, 0x78, 0x6e, 0xfd, 0x4f, 0x9f, 0x22, 0xc8, 0x3e, 0xa9, 0x7c,
	0xac, 0x68, 0x5f, 0x57, 0xa0, 0xf5, 0xcc, 0x0d, 0xf1, 0x94, 0x38, 0x1e, 0x65, 0x6e, 0x70, 0x64,
	0xfb, 0x2e, 0xaf, 0xc2, 0x11, 0xcd, 0xfb, 0x43, 0x50, 0x5d, 0xdf, 0xca, 0xb5, 0x30, 0x10, 0x81,
	0xb2, 0xdd, 0x7d, 0x35, 0x73, 0x89, 0x8f, 0x61, 0x3d, 0xe6, 0x1c, 0xbb, 0xe6, 0xa5, 0x1c, 0x6b,
	0xda, 0x11, 0xf0, 0x33, 0xd7, 0xbc, 0x64, 0xdc, 0x0c, 0x17, 0xcd, 0xb2, 0x55, 0xa3, 0xc1, 0x3e,
	0x75, 0x1b, 0xdd, 0x87, 0x26, 0x1b, 0xd7, 0x59, 0x5a, 0xe6, 0x79, 0xb6, 0x6a, 0xac, 0xb1, 0xef,
	0xa3, 0xf1, 0x58, 0x94, 0x80, 0x24, 0x6b, 0xf3, 0x6c, 0x5b, 0x65, 0x25, 0x20, 0x4e, 0xd7, 0x68,
	0x5f, 0x26, 0xe2, 0x16, 0x4f, 0xc4, 0xef, 0x67, 0xfc, 0x11, 0x1b, 0x9d, 0x4e, 0xc5, 0xe9, 0x92,
	0x03, 0x62, 0x7e, 0x89, 0x4b, 0x0e, 0x82, 0x1a, 0x09, 0xbd, 0x40, 0xb6, 0xd9, 0xfc, 0xbf, 0xf6,
	0x40, 0xe6, 0xda, 0x36, 0x34, 0x9f, 0x1b, 0xfa, 0xb1, 0x7e, 0x7a, 0x70, 0xd2, 0x79, 0x07, 0x35,
	0xa1, 0x76, 0xf8, 0xfc, 0xec, 0x65, 0x47, 0x49, 0xd5, 0xef, 0xf8, 0xb8, 0x52, 0x69, 0xe0, 0x6d,
	0x5c, 0xbe, 0xd3, 0xfc, 0xa5, 0x3b, 0x8f, 0x51, 0xc4, 0x2c, 0x43, 0xf0, 0xde, 0x7c, 0x4f, 0x18,
	0x09, 0xa1, 0xf6, 0x0f, 0x05, 0xd6, 0x75, 0xef, 0x06, 0x7b, 0xd4, 0x27, 0x33, 0x9d, 0xe2, 0xc9,
	0xe2, 0x67, 0xba, 0x34, 0x36, 0x1e, 0xc3, 0xba, 0x15, 0x12, 0x5e, 0xe1, 0x5c, 0x7c, 0x83, 0x5d,
	0x19, 0x21, 0x6d, 0x09, 0x3c, 0x61, 0x30, 0x56, 0x05, 0x27, 0x8e, 0x27, 0x09, 0xc4, 0x80, 0xd8,
	0x9c, 0x38, 0x9e, 0x40, 0x3e, 0x05, 0x18, 0x63, 0x6a, 0x5d, 0x61, 0x9b, 0x0d, 0x4c, 0xf5, 0xe5,
	0x1b, 0x0b, 0x49, 0x7d, 0x40, 0xb5, 0xa7, 0xbc, 0x2b, 0x8c, 0x4d, 0x29, 0xe3, 0xfd, 0x09, 0x6f,
	0xf9, 0x52, 0xac, 0x65, 0xd3, 0x62, 0x8d, 0xbd, 0x1e, 0xe9, 0xf3, 0x5e, 0xc6, 0xe7, 0x19, 0xd7,
	0x1a, 0x9c, 0x4e, 0x7b, 0x03, 0xef, 0x9d, 0xe2, 0x37, 0x59, 0xcc, 0x7f, 0xa1, 0xde, 0xe5, 0xef,
	0xa7, 0x9a, 0xbf, 0x1f, 0xcd, 0x83, 0x2e, 0x2b, 0x88, 0x77, 0x3e, 0x39, 0x31, 0x54, 0x59, 0xc9,
	0x50, 0x0f, 0x76, 0x72, 0x67, 0xdd, 0xd5, 0xb1, 0xab, 0x9d, 0xf7, 0xe7, 0x0a, 0x34, 0x4f, 0xa4,
	0xb9, 0x85, 0x3d, 0xc6, 0x0f, 0xa0, 0x21, 0x56, 0x14, 0x72, 0x51, 0xb3, 0x25, 0xc5, 0x89, 0x3d,
	0xe0, 0x90, 0xa3, 0x0c, 0x49, 0x82, 0x7e, 0x09, 0xeb, 0x96, 0xef, 0x05, 0x14, 0xbb, 0xae, 0x98,
	0xb4, 0x6a, 0x19, 0x15, 0x04, 0xcf, 0x61, 0x9a, 0xc2, 0xc8, 0x32, 0xb0, 0xe3, 0x44, 0x3b, 0x2a,
	0xa3, 0x38, 0x7b, 0x9c, 0x68, 0x49, 0x0d, 0x49, 0xc2, 0x0a, 0x2b, 0x9b, 0xbc, 0x19, 0x75, 0x23,
	0x53, 0xc3, 0xa5, 0x72, 0x02, 0x67, 0x44, 0x44, 0xd9, 0x21, 0x63, 0x6d, 0xd5, 0x21, 0x43, 0x0c,
	0x80, 0x91, 0x83, 0x4a, 0x0e, 0x80, 0xb7, 0xbe, 0x7c, 0x36, 0x00, 0x26, 0x72, 0x4b, 0x0f, 0x80,
	0x91, 0xa0, 0xb9, 0x03, 0x60, 0x2c, 0x37, 0x26, 0xd3, 0xbe, 0x80, 0x9d, 0x2f, 0x42, 0x4c, 0x66,
	0x11, 0xaa, 0x54, 0xbf, 0xb4, 0x0d, 0xf5, 0xd7, 0x8c, 0x59, 0x2e, 0xb4, 0xc4, 0x87, 0x36, 0x81,
	0xcd, 0x94, 0xb4, 0x6f, 0x62, 0x41, 0x75, 0x05, 0x0b, 0xbe, 0xff, 0x3d, 0xa8, 0x19, 0xbe, 0x8b,
	0x59, 0x05, 0x39, 0x38, 0x7d, 0x7e, 0x2a, 0x6a, 0xc9, 0x8b, 0xe1, 0x91, 0xd1, 0x51, 0xd0, 0x3a,
	0xb4, 0x4e, 0x9e, 0x1f, 0xeb, 0xc3, 0x73, 0xfd, 0x70, 0xd8, 0xa9, 0x0c, 0xbe, 0xae, 0x80, 0xaa,
	0x7b, 0x63, 0x7f, 0x28, 0x76, 0x61, 0xe8, 0x0c, 0xda, 0xe9, 0xdd, 0x0c, 0xda, 0xcd, 0xb7, 0x19,
	0xf9, 0xb5, 0x4d, 0xef, 0xc1, 0x82, 0xcd, 0x47, 0x64, 0xe6, 0x6f, 0x61, 0x23, 0xbb, 0xf6, 0x40,
	0x5a, 0x41, 0x66, 0x61, 0x27, 0xd2, 0xdb, 0x5d, 0xb8, 0x75, 0x88, 0xe4, 0x7e, 0x0e, 0x6a, 0x6a,
	0xe1, 0x80, 0x1e, 0xe6, 0x85, 0xe6, 0x56, 0x11, 0xbd, 0x0f, 0xe6, 0x0f, 0xfe, 0x91, 0xb8, 0x21,
	0x37, 0x3c, 0x59, 0x54, 0x16, 0x0c, 0xcf, 0x6f, 0x04, 0x7a, 0x8f, 0x6e, 0xa1, 0x10, 0x42, 0x07,
	0x7f, 0xa9, 0xc2, 0x86, 0xec, 0x5b, 0x23, 0x07, 0x0b, 0xb5, 0xa3, 0x1e, 0xb9, 0xa8, 0x76, 0xae,
	0xcd, 0xcf, 0xa9, 0x5d, 0xe8, 0xad, 0x7f, 0x0d, 0x90, 0x30, 0xa1, 0x07, 0x0b, 0xa4, 0x45, 0xc2,
	0xbe, 0x35, 0xb7, 0xa3, 0x4e, 0xc9, 0x4a, 0x66, 0xa4, 0x9c, 0xac, 0xc2, 0xf0, 0xb4, 0x44, 0xd6,
	0x09, 0xa8, 0xa9, 0xe9, 0x28, 0x67, 0x66, 0x71, 0x6e, 0x5a, 0x22, 0xed, 0x15, 0x6c, 0xcd, 0x99,
	0x63, 0xd0, 0x77, 0x33, 0x4c, 0x8b, 0x27, 0x9d, 0xdb, 0xa5, 0x0f, 0x7c, 0x40, 0xa9, 0xb6, 0x36,
	0xba, 0xa8, 0x97, 0x3c, 0x6e, 0xd3, 0x13, 0x86, 0x76, 0x6b, 0xcb, 0x2d, 0x4e, 0x7a, 0xbc, 0x42,
	0x5b, 0x3e, 0xf8, 0x97, 0x02, 0x28, 0xbd, 0xec, 0x90, 0x27, 0x8e, 0xf8, 0xb0, 0x9b, 0xdd, 0xb2,
	0xa0, 0x27, 0xf3, 0x1e, 0x4b, 0x61, 0x8d, 0xd3, 0xfb, 0xce, 0x32, 0x32, 0xe9, 0xc9, 0xe4, 0x8c,
	0xa4, 0x15, 0x9c, 0x7f, 0x46, 0xa1, 0xd5, 0x9c, 0x7f, 0x46, 0xb1, 0xa3, 0x1c, 0xfc, 0xb5, 0x02,
	0x9d, 0xb8, 0x80, 0x46, 0xc6, 0x89, 0xf7, 0x15, 0x83, 0x8b, 0xef, 0x2b, 0xdf, 0x5b, 0x15, 0xdf,
	0x57, 0xb1, 0x85, 0x7a, 0x05, 0x9d, 0x7c, 0xaf, 0x83, 0xbe, 0x9d, 0x8f, 0xdb, 0x79, 0x0d, 0x49,
	0x4f, 0xbb, 0xa5, 0xdc, 0x47, 0xd2, 0xff, 0x00, 0x9b, 0x85, 0x86, 0x26, 0xe7, 0xab, 0x45, 0x0d,
	0xcf, 0x2a, 0xf2, 0x07, 0x7f, 0x57, 0xe0, 0xdd, 0x28, 0x7b, 0x67, 0xd3, 0x43, 0xdc, 0x66, 0x14,
	0xd2, 0x43, 0xae, 0xbe, 0xe6, 0xd2, 0x43, 0xa1, 0x4a, 0x9e, 0xc3, 0x46, 0xb6, 0x96, 0xe5, 0x82,
	0x78, 0x6e, 0xa1, 0xcb, 0xa5, 0xf4, 0x42, 0xe5, 0x7a, 0xb6, 0xf6, 0xfb, 0xba, 0xe8, 0x96, 0x1b,
	0xfc, 0xe7, 0xa3, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0x86, 0x99, 0xbe, 0xbb, 0x37, 0x1d, 0x00,
	0x00,
}
