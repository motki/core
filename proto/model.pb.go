// Code generated by protoc-gen-go. DO NOT EDIT.
// source: model.proto

package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// A Role describes a user's authorization for certain resources within the system.
type Role int32

const (
	Role_ANON      Role = 0
	Role_USER      Role = 1
	Role_LOGISTICS Role = 2
)

var Role_name = map[int32]string{
	0: "ANON",
	1: "USER",
	2: "LOGISTICS",
}
var Role_value = map[string]int32{
	"ANON":      0,
	"USER":      1,
	"LOGISTICS": 2,
}

func (x Role) String() string {
	return proto1.EnumName(Role_name, int32(x))
}
func (Role) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type Product_Kind int32

const (
	Product_BUY   Product_Kind = 0
	Product_BUILD Product_Kind = 1
)

var Product_Kind_name = map[int32]string{
	0: "BUY",
	1: "BUILD",
}
var Product_Kind_value = map[string]int32{
	"BUY":   0,
	"BUILD": 1,
}

func (x Product_Kind) String() string {
	return proto1.EnumName(Product_Kind_name, int32(x))
}
func (Product_Kind) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{9, 0} }

type Blueprint_Kind int32

const (
	Blueprint_ORIGINAL Blueprint_Kind = 0
	Blueprint_COPY     Blueprint_Kind = 1
)

var Blueprint_Kind_name = map[int32]string{
	0: "ORIGINAL",
	1: "COPY",
}
var Blueprint_Kind_value = map[string]int32{
	"ORIGINAL": 0,
	"COPY":     1,
}

func (x Blueprint_Kind) String() string {
	return proto1.EnumName(Blueprint_Kind_name, int32(x))
}
func (Blueprint_Kind) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{19, 0} }

type Character struct {
	Id            int64                      `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	CorporationId int64                      `protobuf:"varint,2,opt,name=corporation_id,json=corporationId" json:"corporation_id,omitempty"`
	AllianceId    int64                      `protobuf:"varint,3,opt,name=alliance_id,json=allianceId" json:"alliance_id,omitempty"`
	Name          string                     `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	BloodlineId   int32                      `protobuf:"varint,5,opt,name=bloodline_id,json=bloodlineId" json:"bloodline_id,omitempty"`
	RaceId        int32                      `protobuf:"varint,6,opt,name=race_id,json=raceId" json:"race_id,omitempty"`
	AncestryId    int32                      `protobuf:"varint,7,opt,name=ancestry_id,json=ancestryId" json:"ancestry_id,omitempty"`
	BirthDate     *google_protobuf.Timestamp `protobuf:"bytes,8,opt,name=birth_date,json=birthDate" json:"birth_date,omitempty"`
	Description   string                     `protobuf:"bytes,9,opt,name=description" json:"description,omitempty"`
}

func (m *Character) Reset()                    { *m = Character{} }
func (m *Character) String() string            { return proto1.CompactTextString(m) }
func (*Character) ProtoMessage()               {}
func (*Character) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *Character) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Character) GetCorporationId() int64 {
	if m != nil {
		return m.CorporationId
	}
	return 0
}

func (m *Character) GetAllianceId() int64 {
	if m != nil {
		return m.AllianceId
	}
	return 0
}

func (m *Character) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Character) GetBloodlineId() int32 {
	if m != nil {
		return m.BloodlineId
	}
	return 0
}

func (m *Character) GetRaceId() int32 {
	if m != nil {
		return m.RaceId
	}
	return 0
}

func (m *Character) GetAncestryId() int32 {
	if m != nil {
		return m.AncestryId
	}
	return 0
}

func (m *Character) GetBirthDate() *google_protobuf.Timestamp {
	if m != nil {
		return m.BirthDate
	}
	return nil
}

func (m *Character) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type GetCharacterRequest struct {
	Token       *Token `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	Role        Role   `protobuf:"varint,2,opt,name=role,enum=motki.model.Role" json:"role,omitempty"`
	CharacterId int64  `protobuf:"varint,3,opt,name=character_id,json=characterId" json:"character_id,omitempty"`
}

func (m *GetCharacterRequest) Reset()                    { *m = GetCharacterRequest{} }
func (m *GetCharacterRequest) String() string            { return proto1.CompactTextString(m) }
func (*GetCharacterRequest) ProtoMessage()               {}
func (*GetCharacterRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *GetCharacterRequest) GetToken() *Token {
	if m != nil {
		return m.Token
	}
	return nil
}

func (m *GetCharacterRequest) GetRole() Role {
	if m != nil {
		return m.Role
	}
	return Role_ANON
}

func (m *GetCharacterRequest) GetCharacterId() int64 {
	if m != nil {
		return m.CharacterId
	}
	return 0
}

type CharacterResponse struct {
	Result    *Result    `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	Character *Character `protobuf:"bytes,2,opt,name=character" json:"character,omitempty"`
}

func (m *CharacterResponse) Reset()                    { *m = CharacterResponse{} }
func (m *CharacterResponse) String() string            { return proto1.CompactTextString(m) }
func (*CharacterResponse) ProtoMessage()               {}
func (*CharacterResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *CharacterResponse) GetResult() *Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *CharacterResponse) GetCharacter() *Character {
	if m != nil {
		return m.Character
	}
	return nil
}

type Corporation struct {
	Id           int64                      `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	AllianceId   int64                      `protobuf:"varint,2,opt,name=alliance_id,json=allianceId" json:"alliance_id,omitempty"`
	Name         string                     `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	CreationDate *google_protobuf.Timestamp `protobuf:"bytes,4,opt,name=creation_date,json=creationDate" json:"creation_date,omitempty"`
	Description  string                     `protobuf:"bytes,5,opt,name=description" json:"description,omitempty"`
	Ticker       string                     `protobuf:"bytes,6,opt,name=ticker" json:"ticker,omitempty"`
}

func (m *Corporation) Reset()                    { *m = Corporation{} }
func (m *Corporation) String() string            { return proto1.CompactTextString(m) }
func (*Corporation) ProtoMessage()               {}
func (*Corporation) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *Corporation) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Corporation) GetAllianceId() int64 {
	if m != nil {
		return m.AllianceId
	}
	return 0
}

func (m *Corporation) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Corporation) GetCreationDate() *google_protobuf.Timestamp {
	if m != nil {
		return m.CreationDate
	}
	return nil
}

func (m *Corporation) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Corporation) GetTicker() string {
	if m != nil {
		return m.Ticker
	}
	return ""
}

type GetCorporationRequest struct {
	Token         *Token `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	CorporationId int64  `protobuf:"varint,2,opt,name=corporation_id,json=corporationId" json:"corporation_id,omitempty"`
}

func (m *GetCorporationRequest) Reset()                    { *m = GetCorporationRequest{} }
func (m *GetCorporationRequest) String() string            { return proto1.CompactTextString(m) }
func (*GetCorporationRequest) ProtoMessage()               {}
func (*GetCorporationRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *GetCorporationRequest) GetToken() *Token {
	if m != nil {
		return m.Token
	}
	return nil
}

func (m *GetCorporationRequest) GetCorporationId() int64 {
	if m != nil {
		return m.CorporationId
	}
	return 0
}

type CorporationResponse struct {
	Result      *Result      `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	Corporation *Corporation `protobuf:"bytes,2,opt,name=corporation" json:"corporation,omitempty"`
}

func (m *CorporationResponse) Reset()                    { *m = CorporationResponse{} }
func (m *CorporationResponse) String() string            { return proto1.CompactTextString(m) }
func (*CorporationResponse) ProtoMessage()               {}
func (*CorporationResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *CorporationResponse) GetResult() *Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *CorporationResponse) GetCorporation() *Corporation {
	if m != nil {
		return m.Corporation
	}
	return nil
}

type Alliance struct {
	Id          int64                      `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name        string                     `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	DateFounded *google_protobuf.Timestamp `protobuf:"bytes,3,opt,name=date_founded,json=dateFounded" json:"date_founded,omitempty"`
	Ticker      string                     `protobuf:"bytes,4,opt,name=ticker" json:"ticker,omitempty"`
}

func (m *Alliance) Reset()                    { *m = Alliance{} }
func (m *Alliance) String() string            { return proto1.CompactTextString(m) }
func (*Alliance) ProtoMessage()               {}
func (*Alliance) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

func (m *Alliance) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Alliance) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Alliance) GetDateFounded() *google_protobuf.Timestamp {
	if m != nil {
		return m.DateFounded
	}
	return nil
}

func (m *Alliance) GetTicker() string {
	if m != nil {
		return m.Ticker
	}
	return ""
}

type GetAllianceRequest struct {
	Token      *Token `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	AllianceId int64  `protobuf:"varint,2,opt,name=alliance_id,json=allianceId" json:"alliance_id,omitempty"`
}

func (m *GetAllianceRequest) Reset()                    { *m = GetAllianceRequest{} }
func (m *GetAllianceRequest) String() string            { return proto1.CompactTextString(m) }
func (*GetAllianceRequest) ProtoMessage()               {}
func (*GetAllianceRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

func (m *GetAllianceRequest) GetToken() *Token {
	if m != nil {
		return m.Token
	}
	return nil
}

func (m *GetAllianceRequest) GetAllianceId() int64 {
	if m != nil {
		return m.AllianceId
	}
	return 0
}

type AllianceResponse struct {
	Result   *Result   `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	Alliance *Alliance `protobuf:"bytes,2,opt,name=alliance" json:"alliance,omitempty"`
}

func (m *AllianceResponse) Reset()                    { *m = AllianceResponse{} }
func (m *AllianceResponse) String() string            { return proto1.CompactTextString(m) }
func (*AllianceResponse) ProtoMessage()               {}
func (*AllianceResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8} }

func (m *AllianceResponse) GetResult() *Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *AllianceResponse) GetAlliance() *Alliance {
	if m != nil {
		return m.Alliance
	}
	return nil
}

type Product struct {
	Id                 int32        `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	TypeId             int64        `protobuf:"varint,2,opt,name=type_id,json=typeId" json:"type_id,omitempty"`
	Quantity           int32        `protobuf:"varint,3,opt,name=quantity" json:"quantity,omitempty"`
	MarketPrice        float64      `protobuf:"fixed64,4,opt,name=market_price,json=marketPrice" json:"market_price,omitempty"`
	MarketRegionId     int32        `protobuf:"varint,5,opt,name=market_region_id,json=marketRegionId" json:"market_region_id,omitempty"`
	MaterialEfficiency float64      `protobuf:"fixed64,6,opt,name=material_efficiency,json=materialEfficiency" json:"material_efficiency,omitempty"`
	BatchSize          int32        `protobuf:"varint,7,opt,name=batch_size,json=batchSize" json:"batch_size,omitempty"`
	Kind               Product_Kind `protobuf:"varint,8,opt,name=kind,enum=motki.model.Product_Kind" json:"kind,omitempty"`
	ParentId           int32        `protobuf:"varint,9,opt,name=parent_id,json=parentId" json:"parent_id,omitempty"`
	Material           []*Product   `protobuf:"bytes,10,rep,name=material" json:"material,omitempty"`
}

func (m *Product) Reset()                    { *m = Product{} }
func (m *Product) String() string            { return proto1.CompactTextString(m) }
func (*Product) ProtoMessage()               {}
func (*Product) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{9} }

func (m *Product) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Product) GetTypeId() int64 {
	if m != nil {
		return m.TypeId
	}
	return 0
}

func (m *Product) GetQuantity() int32 {
	if m != nil {
		return m.Quantity
	}
	return 0
}

func (m *Product) GetMarketPrice() float64 {
	if m != nil {
		return m.MarketPrice
	}
	return 0
}

func (m *Product) GetMarketRegionId() int32 {
	if m != nil {
		return m.MarketRegionId
	}
	return 0
}

func (m *Product) GetMaterialEfficiency() float64 {
	if m != nil {
		return m.MaterialEfficiency
	}
	return 0
}

func (m *Product) GetBatchSize() int32 {
	if m != nil {
		return m.BatchSize
	}
	return 0
}

func (m *Product) GetKind() Product_Kind {
	if m != nil {
		return m.Kind
	}
	return Product_BUY
}

func (m *Product) GetParentId() int32 {
	if m != nil {
		return m.ParentId
	}
	return 0
}

func (m *Product) GetMaterial() []*Product {
	if m != nil {
		return m.Material
	}
	return nil
}

type ProductResponse struct {
	Result  *Result  `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	Product *Product `protobuf:"bytes,2,opt,name=product" json:"product,omitempty"`
}

func (m *ProductResponse) Reset()                    { *m = ProductResponse{} }
func (m *ProductResponse) String() string            { return proto1.CompactTextString(m) }
func (*ProductResponse) ProtoMessage()               {}
func (*ProductResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{10} }

func (m *ProductResponse) GetResult() *Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *ProductResponse) GetProduct() *Product {
	if m != nil {
		return m.Product
	}
	return nil
}

type GetProductRequest struct {
	Token *Token `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	Id    int32  `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
}

func (m *GetProductRequest) Reset()                    { *m = GetProductRequest{} }
func (m *GetProductRequest) String() string            { return proto1.CompactTextString(m) }
func (*GetProductRequest) ProtoMessage()               {}
func (*GetProductRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{11} }

func (m *GetProductRequest) GetToken() *Token {
	if m != nil {
		return m.Token
	}
	return nil
}

func (m *GetProductRequest) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type NewProductRequest struct {
	Token  *Token `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	TypeId int64  `protobuf:"varint,2,opt,name=type_id,json=typeId" json:"type_id,omitempty"`
}

func (m *NewProductRequest) Reset()                    { *m = NewProductRequest{} }
func (m *NewProductRequest) String() string            { return proto1.CompactTextString(m) }
func (*NewProductRequest) ProtoMessage()               {}
func (*NewProductRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{12} }

func (m *NewProductRequest) GetToken() *Token {
	if m != nil {
		return m.Token
	}
	return nil
}

func (m *NewProductRequest) GetTypeId() int64 {
	if m != nil {
		return m.TypeId
	}
	return 0
}

type SaveProductRequest struct {
	Token   *Token   `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	Product *Product `protobuf:"bytes,2,opt,name=product" json:"product,omitempty"`
}

func (m *SaveProductRequest) Reset()                    { *m = SaveProductRequest{} }
func (m *SaveProductRequest) String() string            { return proto1.CompactTextString(m) }
func (*SaveProductRequest) ProtoMessage()               {}
func (*SaveProductRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{13} }

func (m *SaveProductRequest) GetToken() *Token {
	if m != nil {
		return m.Token
	}
	return nil
}

func (m *SaveProductRequest) GetProduct() *Product {
	if m != nil {
		return m.Product
	}
	return nil
}

type GetProductsRequest struct {
	Token *Token `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (m *GetProductsRequest) Reset()                    { *m = GetProductsRequest{} }
func (m *GetProductsRequest) String() string            { return proto1.CompactTextString(m) }
func (*GetProductsRequest) ProtoMessage()               {}
func (*GetProductsRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{14} }

func (m *GetProductsRequest) GetToken() *Token {
	if m != nil {
		return m.Token
	}
	return nil
}

type ProductsResponse struct {
	Result  *Result    `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	Product []*Product `protobuf:"bytes,2,rep,name=product" json:"product,omitempty"`
}

func (m *ProductsResponse) Reset()                    { *m = ProductsResponse{} }
func (m *ProductsResponse) String() string            { return proto1.CompactTextString(m) }
func (*ProductsResponse) ProtoMessage()               {}
func (*ProductsResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{15} }

func (m *ProductsResponse) GetResult() *Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *ProductsResponse) GetProduct() []*Product {
	if m != nil {
		return m.Product
	}
	return nil
}

type MarketPrice struct {
	TypeId  int64   `protobuf:"varint,1,opt,name=type_id,json=typeId" json:"type_id,omitempty"`
	Average float64 `protobuf:"fixed64,2,opt,name=average" json:"average,omitempty"`
	Base    float64 `protobuf:"fixed64,3,opt,name=base" json:"base,omitempty"`
}

func (m *MarketPrice) Reset()                    { *m = MarketPrice{} }
func (m *MarketPrice) String() string            { return proto1.CompactTextString(m) }
func (*MarketPrice) ProtoMessage()               {}
func (*MarketPrice) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{16} }

func (m *MarketPrice) GetTypeId() int64 {
	if m != nil {
		return m.TypeId
	}
	return 0
}

func (m *MarketPrice) GetAverage() float64 {
	if m != nil {
		return m.Average
	}
	return 0
}

func (m *MarketPrice) GetBase() float64 {
	if m != nil {
		return m.Base
	}
	return 0
}

type GetMarketPriceRequest struct {
	Token  *Token  `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	TypeId []int64 `protobuf:"varint,2,rep,packed,name=type_id,json=typeId" json:"type_id,omitempty"`
}

func (m *GetMarketPriceRequest) Reset()                    { *m = GetMarketPriceRequest{} }
func (m *GetMarketPriceRequest) String() string            { return proto1.CompactTextString(m) }
func (*GetMarketPriceRequest) ProtoMessage()               {}
func (*GetMarketPriceRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{17} }

func (m *GetMarketPriceRequest) GetToken() *Token {
	if m != nil {
		return m.Token
	}
	return nil
}

func (m *GetMarketPriceRequest) GetTypeId() []int64 {
	if m != nil {
		return m.TypeId
	}
	return nil
}

type GetMarketPriceResponse struct {
	Result *Result                `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	Prices map[int64]*MarketPrice `protobuf:"bytes,2,rep,name=prices" json:"prices,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *GetMarketPriceResponse) Reset()                    { *m = GetMarketPriceResponse{} }
func (m *GetMarketPriceResponse) String() string            { return proto1.CompactTextString(m) }
func (*GetMarketPriceResponse) ProtoMessage()               {}
func (*GetMarketPriceResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{18} }

func (m *GetMarketPriceResponse) GetResult() *Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *GetMarketPriceResponse) GetPrices() map[int64]*MarketPrice {
	if m != nil {
		return m.Prices
	}
	return nil
}

type Blueprint struct {
	ItemId      int64          `protobuf:"varint,1,opt,name=item_id,json=itemId" json:"item_id,omitempty"`
	LocationId  int64          `protobuf:"varint,2,opt,name=location_id,json=locationId" json:"location_id,omitempty"`
	TypeId      int64          `protobuf:"varint,3,opt,name=type_id,json=typeId" json:"type_id,omitempty"`
	TypeName    string         `protobuf:"bytes,4,opt,name=type_name,json=typeName" json:"type_name,omitempty"`
	FlagId      int64          `protobuf:"varint,5,opt,name=flag_id,json=flagId" json:"flag_id,omitempty"`
	TimeEff     int64          `protobuf:"varint,6,opt,name=time_eff,json=timeEff" json:"time_eff,omitempty"`
	MaterialEff int64          `protobuf:"varint,7,opt,name=material_eff,json=materialEff" json:"material_eff,omitempty"`
	Kind        Blueprint_Kind `protobuf:"varint,8,opt,name=kind,enum=motki.model.Blueprint_Kind" json:"kind,omitempty"`
	Quantity    int64          `protobuf:"varint,9,opt,name=quantity" json:"quantity,omitempty"`
	Runs        int64          `protobuf:"varint,10,opt,name=runs" json:"runs,omitempty"`
}

func (m *Blueprint) Reset()                    { *m = Blueprint{} }
func (m *Blueprint) String() string            { return proto1.CompactTextString(m) }
func (*Blueprint) ProtoMessage()               {}
func (*Blueprint) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{19} }

func (m *Blueprint) GetItemId() int64 {
	if m != nil {
		return m.ItemId
	}
	return 0
}

func (m *Blueprint) GetLocationId() int64 {
	if m != nil {
		return m.LocationId
	}
	return 0
}

func (m *Blueprint) GetTypeId() int64 {
	if m != nil {
		return m.TypeId
	}
	return 0
}

func (m *Blueprint) GetTypeName() string {
	if m != nil {
		return m.TypeName
	}
	return ""
}

func (m *Blueprint) GetFlagId() int64 {
	if m != nil {
		return m.FlagId
	}
	return 0
}

func (m *Blueprint) GetTimeEff() int64 {
	if m != nil {
		return m.TimeEff
	}
	return 0
}

func (m *Blueprint) GetMaterialEff() int64 {
	if m != nil {
		return m.MaterialEff
	}
	return 0
}

func (m *Blueprint) GetKind() Blueprint_Kind {
	if m != nil {
		return m.Kind
	}
	return Blueprint_ORIGINAL
}

func (m *Blueprint) GetQuantity() int64 {
	if m != nil {
		return m.Quantity
	}
	return 0
}

func (m *Blueprint) GetRuns() int64 {
	if m != nil {
		return m.Runs
	}
	return 0
}

type GetCorpBlueprintsRequest struct {
	Token *Token `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (m *GetCorpBlueprintsRequest) Reset()                    { *m = GetCorpBlueprintsRequest{} }
func (m *GetCorpBlueprintsRequest) String() string            { return proto1.CompactTextString(m) }
func (*GetCorpBlueprintsRequest) ProtoMessage()               {}
func (*GetCorpBlueprintsRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{20} }

func (m *GetCorpBlueprintsRequest) GetToken() *Token {
	if m != nil {
		return m.Token
	}
	return nil
}

type GetCorpBlueprintsResponse struct {
	Result    *Result      `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	Blueprint []*Blueprint `protobuf:"bytes,2,rep,name=blueprint" json:"blueprint,omitempty"`
}

func (m *GetCorpBlueprintsResponse) Reset()                    { *m = GetCorpBlueprintsResponse{} }
func (m *GetCorpBlueprintsResponse) String() string            { return proto1.CompactTextString(m) }
func (*GetCorpBlueprintsResponse) ProtoMessage()               {}
func (*GetCorpBlueprintsResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{21} }

func (m *GetCorpBlueprintsResponse) GetResult() *Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *GetCorpBlueprintsResponse) GetBlueprint() []*Blueprint {
	if m != nil {
		return m.Blueprint
	}
	return nil
}

type InventoryItem struct {
	TypeId       int64                      `protobuf:"varint,1,opt,name=type_id,json=typeId" json:"type_id,omitempty"`
	LocationId   int64                      `protobuf:"varint,2,opt,name=location_id,json=locationId" json:"location_id,omitempty"`
	CurrentLevel int64                      `protobuf:"varint,3,opt,name=current_level,json=currentLevel" json:"current_level,omitempty"`
	MinLevel     int64                      `protobuf:"varint,4,opt,name=min_level,json=minLevel" json:"min_level,omitempty"`
	FetchedAt    *google_protobuf.Timestamp `protobuf:"bytes,5,opt,name=fetched_at,json=fetchedAt" json:"fetched_at,omitempty"`
}

func (m *InventoryItem) Reset()                    { *m = InventoryItem{} }
func (m *InventoryItem) String() string            { return proto1.CompactTextString(m) }
func (*InventoryItem) ProtoMessage()               {}
func (*InventoryItem) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{22} }

func (m *InventoryItem) GetTypeId() int64 {
	if m != nil {
		return m.TypeId
	}
	return 0
}

func (m *InventoryItem) GetLocationId() int64 {
	if m != nil {
		return m.LocationId
	}
	return 0
}

func (m *InventoryItem) GetCurrentLevel() int64 {
	if m != nil {
		return m.CurrentLevel
	}
	return 0
}

func (m *InventoryItem) GetMinLevel() int64 {
	if m != nil {
		return m.MinLevel
	}
	return 0
}

func (m *InventoryItem) GetFetchedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.FetchedAt
	}
	return nil
}

type GetInventoryRequest struct {
	Token *Token `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (m *GetInventoryRequest) Reset()                    { *m = GetInventoryRequest{} }
func (m *GetInventoryRequest) String() string            { return proto1.CompactTextString(m) }
func (*GetInventoryRequest) ProtoMessage()               {}
func (*GetInventoryRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{23} }

func (m *GetInventoryRequest) GetToken() *Token {
	if m != nil {
		return m.Token
	}
	return nil
}

type GetInventoryResponse struct {
	Result *Result          `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	Item   []*InventoryItem `protobuf:"bytes,2,rep,name=item" json:"item,omitempty"`
}

func (m *GetInventoryResponse) Reset()                    { *m = GetInventoryResponse{} }
func (m *GetInventoryResponse) String() string            { return proto1.CompactTextString(m) }
func (*GetInventoryResponse) ProtoMessage()               {}
func (*GetInventoryResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{24} }

func (m *GetInventoryResponse) GetResult() *Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *GetInventoryResponse) GetItem() []*InventoryItem {
	if m != nil {
		return m.Item
	}
	return nil
}

type NewInventoryItemRequest struct {
	Token      *Token `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	TypeId     int64  `protobuf:"varint,2,opt,name=type_id,json=typeId" json:"type_id,omitempty"`
	LocationId int64  `protobuf:"varint,3,opt,name=location_id,json=locationId" json:"location_id,omitempty"`
}

func (m *NewInventoryItemRequest) Reset()                    { *m = NewInventoryItemRequest{} }
func (m *NewInventoryItemRequest) String() string            { return proto1.CompactTextString(m) }
func (*NewInventoryItemRequest) ProtoMessage()               {}
func (*NewInventoryItemRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{25} }

func (m *NewInventoryItemRequest) GetToken() *Token {
	if m != nil {
		return m.Token
	}
	return nil
}

func (m *NewInventoryItemRequest) GetTypeId() int64 {
	if m != nil {
		return m.TypeId
	}
	return 0
}

func (m *NewInventoryItemRequest) GetLocationId() int64 {
	if m != nil {
		return m.LocationId
	}
	return 0
}

type SaveInventoryItemRequest struct {
	Token *Token         `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	Item  *InventoryItem `protobuf:"bytes,2,opt,name=item" json:"item,omitempty"`
}

func (m *SaveInventoryItemRequest) Reset()                    { *m = SaveInventoryItemRequest{} }
func (m *SaveInventoryItemRequest) String() string            { return proto1.CompactTextString(m) }
func (*SaveInventoryItemRequest) ProtoMessage()               {}
func (*SaveInventoryItemRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{26} }

func (m *SaveInventoryItemRequest) GetToken() *Token {
	if m != nil {
		return m.Token
	}
	return nil
}

func (m *SaveInventoryItemRequest) GetItem() *InventoryItem {
	if m != nil {
		return m.Item
	}
	return nil
}

type InventoryItemResponse struct {
	Result *Result        `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	Item   *InventoryItem `protobuf:"bytes,2,opt,name=item" json:"item,omitempty"`
}

func (m *InventoryItemResponse) Reset()                    { *m = InventoryItemResponse{} }
func (m *InventoryItemResponse) String() string            { return proto1.CompactTextString(m) }
func (*InventoryItemResponse) ProtoMessage()               {}
func (*InventoryItemResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{27} }

func (m *InventoryItemResponse) GetResult() *Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *InventoryItemResponse) GetItem() *InventoryItem {
	if m != nil {
		return m.Item
	}
	return nil
}

func init() {
	proto1.RegisterType((*Character)(nil), "motki.model.Character")
	proto1.RegisterType((*GetCharacterRequest)(nil), "motki.model.GetCharacterRequest")
	proto1.RegisterType((*CharacterResponse)(nil), "motki.model.CharacterResponse")
	proto1.RegisterType((*Corporation)(nil), "motki.model.Corporation")
	proto1.RegisterType((*GetCorporationRequest)(nil), "motki.model.GetCorporationRequest")
	proto1.RegisterType((*CorporationResponse)(nil), "motki.model.CorporationResponse")
	proto1.RegisterType((*Alliance)(nil), "motki.model.Alliance")
	proto1.RegisterType((*GetAllianceRequest)(nil), "motki.model.GetAllianceRequest")
	proto1.RegisterType((*AllianceResponse)(nil), "motki.model.AllianceResponse")
	proto1.RegisterType((*Product)(nil), "motki.model.Product")
	proto1.RegisterType((*ProductResponse)(nil), "motki.model.ProductResponse")
	proto1.RegisterType((*GetProductRequest)(nil), "motki.model.GetProductRequest")
	proto1.RegisterType((*NewProductRequest)(nil), "motki.model.NewProductRequest")
	proto1.RegisterType((*SaveProductRequest)(nil), "motki.model.SaveProductRequest")
	proto1.RegisterType((*GetProductsRequest)(nil), "motki.model.GetProductsRequest")
	proto1.RegisterType((*ProductsResponse)(nil), "motki.model.ProductsResponse")
	proto1.RegisterType((*MarketPrice)(nil), "motki.model.MarketPrice")
	proto1.RegisterType((*GetMarketPriceRequest)(nil), "motki.model.GetMarketPriceRequest")
	proto1.RegisterType((*GetMarketPriceResponse)(nil), "motki.model.GetMarketPriceResponse")
	proto1.RegisterType((*Blueprint)(nil), "motki.model.Blueprint")
	proto1.RegisterType((*GetCorpBlueprintsRequest)(nil), "motki.model.GetCorpBlueprintsRequest")
	proto1.RegisterType((*GetCorpBlueprintsResponse)(nil), "motki.model.GetCorpBlueprintsResponse")
	proto1.RegisterType((*InventoryItem)(nil), "motki.model.InventoryItem")
	proto1.RegisterType((*GetInventoryRequest)(nil), "motki.model.GetInventoryRequest")
	proto1.RegisterType((*GetInventoryResponse)(nil), "motki.model.GetInventoryResponse")
	proto1.RegisterType((*NewInventoryItemRequest)(nil), "motki.model.NewInventoryItemRequest")
	proto1.RegisterType((*SaveInventoryItemRequest)(nil), "motki.model.SaveInventoryItemRequest")
	proto1.RegisterType((*InventoryItemResponse)(nil), "motki.model.InventoryItemResponse")
	proto1.RegisterEnum("motki.model.Role", Role_name, Role_value)
	proto1.RegisterEnum("motki.model.Product_Kind", Product_Kind_name, Product_Kind_value)
	proto1.RegisterEnum("motki.model.Blueprint_Kind", Blueprint_Kind_name, Blueprint_Kind_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for InfoService service

type InfoServiceClient interface {
	GetCharacter(ctx context.Context, in *GetCharacterRequest, opts ...grpc.CallOption) (*CharacterResponse, error)
	GetCorporation(ctx context.Context, in *GetCorporationRequest, opts ...grpc.CallOption) (*CorporationResponse, error)
	GetAlliance(ctx context.Context, in *GetAllianceRequest, opts ...grpc.CallOption) (*AllianceResponse, error)
}

type infoServiceClient struct {
	cc *grpc.ClientConn
}

func NewInfoServiceClient(cc *grpc.ClientConn) InfoServiceClient {
	return &infoServiceClient{cc}
}

func (c *infoServiceClient) GetCharacter(ctx context.Context, in *GetCharacterRequest, opts ...grpc.CallOption) (*CharacterResponse, error) {
	out := new(CharacterResponse)
	err := grpc.Invoke(ctx, "/motki.model.InfoService/GetCharacter", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServiceClient) GetCorporation(ctx context.Context, in *GetCorporationRequest, opts ...grpc.CallOption) (*CorporationResponse, error) {
	out := new(CorporationResponse)
	err := grpc.Invoke(ctx, "/motki.model.InfoService/GetCorporation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServiceClient) GetAlliance(ctx context.Context, in *GetAllianceRequest, opts ...grpc.CallOption) (*AllianceResponse, error) {
	out := new(AllianceResponse)
	err := grpc.Invoke(ctx, "/motki.model.InfoService/GetAlliance", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for InfoService service

type InfoServiceServer interface {
	GetCharacter(context.Context, *GetCharacterRequest) (*CharacterResponse, error)
	GetCorporation(context.Context, *GetCorporationRequest) (*CorporationResponse, error)
	GetAlliance(context.Context, *GetAllianceRequest) (*AllianceResponse, error)
}

func RegisterInfoServiceServer(s *grpc.Server, srv InfoServiceServer) {
	s.RegisterService(&_InfoService_serviceDesc, srv)
}

func _InfoService_GetCharacter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCharacterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServiceServer).GetCharacter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/motki.model.InfoService/GetCharacter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServiceServer).GetCharacter(ctx, req.(*GetCharacterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoService_GetCorporation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCorporationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServiceServer).GetCorporation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/motki.model.InfoService/GetCorporation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServiceServer).GetCorporation(ctx, req.(*GetCorporationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoService_GetAlliance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllianceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServiceServer).GetAlliance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/motki.model.InfoService/GetAlliance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServiceServer).GetAlliance(ctx, req.(*GetAllianceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _InfoService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "motki.model.InfoService",
	HandlerType: (*InfoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCharacter",
			Handler:    _InfoService_GetCharacter_Handler,
		},
		{
			MethodName: "GetCorporation",
			Handler:    _InfoService_GetCorporation_Handler,
		},
		{
			MethodName: "GetAlliance",
			Handler:    _InfoService_GetAlliance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "model.proto",
}

// Client API for ProductService service

type ProductServiceClient interface {
	GetProducts(ctx context.Context, in *GetProductsRequest, opts ...grpc.CallOption) (*ProductsResponse, error)
	GetProduct(ctx context.Context, in *GetProductRequest, opts ...grpc.CallOption) (*ProductResponse, error)
	NewProduct(ctx context.Context, in *NewProductRequest, opts ...grpc.CallOption) (*ProductResponse, error)
	SaveProduct(ctx context.Context, in *SaveProductRequest, opts ...grpc.CallOption) (*ProductResponse, error)
}

type productServiceClient struct {
	cc *grpc.ClientConn
}

func NewProductServiceClient(cc *grpc.ClientConn) ProductServiceClient {
	return &productServiceClient{cc}
}

func (c *productServiceClient) GetProducts(ctx context.Context, in *GetProductsRequest, opts ...grpc.CallOption) (*ProductsResponse, error) {
	out := new(ProductsResponse)
	err := grpc.Invoke(ctx, "/motki.model.ProductService/GetProducts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetProduct(ctx context.Context, in *GetProductRequest, opts ...grpc.CallOption) (*ProductResponse, error) {
	out := new(ProductResponse)
	err := grpc.Invoke(ctx, "/motki.model.ProductService/GetProduct", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) NewProduct(ctx context.Context, in *NewProductRequest, opts ...grpc.CallOption) (*ProductResponse, error) {
	out := new(ProductResponse)
	err := grpc.Invoke(ctx, "/motki.model.ProductService/NewProduct", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) SaveProduct(ctx context.Context, in *SaveProductRequest, opts ...grpc.CallOption) (*ProductResponse, error) {
	out := new(ProductResponse)
	err := grpc.Invoke(ctx, "/motki.model.ProductService/SaveProduct", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ProductService service

type ProductServiceServer interface {
	GetProducts(context.Context, *GetProductsRequest) (*ProductsResponse, error)
	GetProduct(context.Context, *GetProductRequest) (*ProductResponse, error)
	NewProduct(context.Context, *NewProductRequest) (*ProductResponse, error)
	SaveProduct(context.Context, *SaveProductRequest) (*ProductResponse, error)
}

func RegisterProductServiceServer(s *grpc.Server, srv ProductServiceServer) {
	s.RegisterService(&_ProductService_serviceDesc, srv)
}

func _ProductService_GetProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/motki.model.ProductService/GetProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetProducts(ctx, req.(*GetProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/motki.model.ProductService/GetProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetProduct(ctx, req.(*GetProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_NewProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).NewProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/motki.model.ProductService/NewProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).NewProduct(ctx, req.(*NewProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_SaveProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).SaveProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/motki.model.ProductService/SaveProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).SaveProduct(ctx, req.(*SaveProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ProductService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "motki.model.ProductService",
	HandlerType: (*ProductServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProducts",
			Handler:    _ProductService_GetProducts_Handler,
		},
		{
			MethodName: "GetProduct",
			Handler:    _ProductService_GetProduct_Handler,
		},
		{
			MethodName: "NewProduct",
			Handler:    _ProductService_NewProduct_Handler,
		},
		{
			MethodName: "SaveProduct",
			Handler:    _ProductService_SaveProduct_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "model.proto",
}

// Client API for MarketPriceService service

type MarketPriceServiceClient interface {
	GetMarketPrice(ctx context.Context, in *GetMarketPriceRequest, opts ...grpc.CallOption) (*GetMarketPriceResponse, error)
}

type marketPriceServiceClient struct {
	cc *grpc.ClientConn
}

func NewMarketPriceServiceClient(cc *grpc.ClientConn) MarketPriceServiceClient {
	return &marketPriceServiceClient{cc}
}

func (c *marketPriceServiceClient) GetMarketPrice(ctx context.Context, in *GetMarketPriceRequest, opts ...grpc.CallOption) (*GetMarketPriceResponse, error) {
	out := new(GetMarketPriceResponse)
	err := grpc.Invoke(ctx, "/motki.model.MarketPriceService/GetMarketPrice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MarketPriceService service

type MarketPriceServiceServer interface {
	GetMarketPrice(context.Context, *GetMarketPriceRequest) (*GetMarketPriceResponse, error)
}

func RegisterMarketPriceServiceServer(s *grpc.Server, srv MarketPriceServiceServer) {
	s.RegisterService(&_MarketPriceService_serviceDesc, srv)
}

func _MarketPriceService_GetMarketPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMarketPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketPriceServiceServer).GetMarketPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/motki.model.MarketPriceService/GetMarketPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketPriceServiceServer).GetMarketPrice(ctx, req.(*GetMarketPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MarketPriceService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "motki.model.MarketPriceService",
	HandlerType: (*MarketPriceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMarketPrice",
			Handler:    _MarketPriceService_GetMarketPrice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "model.proto",
}

// Client API for CorporationService service

type CorporationServiceClient interface {
	GetCorpBlueprints(ctx context.Context, in *GetCorpBlueprintsRequest, opts ...grpc.CallOption) (*GetCorpBlueprintsResponse, error)
}

type corporationServiceClient struct {
	cc *grpc.ClientConn
}

func NewCorporationServiceClient(cc *grpc.ClientConn) CorporationServiceClient {
	return &corporationServiceClient{cc}
}

func (c *corporationServiceClient) GetCorpBlueprints(ctx context.Context, in *GetCorpBlueprintsRequest, opts ...grpc.CallOption) (*GetCorpBlueprintsResponse, error) {
	out := new(GetCorpBlueprintsResponse)
	err := grpc.Invoke(ctx, "/motki.model.CorporationService/GetCorpBlueprints", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CorporationService service

type CorporationServiceServer interface {
	GetCorpBlueprints(context.Context, *GetCorpBlueprintsRequest) (*GetCorpBlueprintsResponse, error)
}

func RegisterCorporationServiceServer(s *grpc.Server, srv CorporationServiceServer) {
	s.RegisterService(&_CorporationService_serviceDesc, srv)
}

func _CorporationService_GetCorpBlueprints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCorpBlueprintsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CorporationServiceServer).GetCorpBlueprints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/motki.model.CorporationService/GetCorpBlueprints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CorporationServiceServer).GetCorpBlueprints(ctx, req.(*GetCorpBlueprintsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CorporationService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "motki.model.CorporationService",
	HandlerType: (*CorporationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCorpBlueprints",
			Handler:    _CorporationService_GetCorpBlueprints_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "model.proto",
}

// Client API for InventoryService service

type InventoryServiceClient interface {
	GetInventory(ctx context.Context, in *GetInventoryRequest, opts ...grpc.CallOption) (*GetInventoryResponse, error)
	NewInventoryItem(ctx context.Context, in *NewInventoryItemRequest, opts ...grpc.CallOption) (*InventoryItemResponse, error)
	SaveInventoryItem(ctx context.Context, in *SaveInventoryItemRequest, opts ...grpc.CallOption) (*InventoryItemResponse, error)
}

type inventoryServiceClient struct {
	cc *grpc.ClientConn
}

func NewInventoryServiceClient(cc *grpc.ClientConn) InventoryServiceClient {
	return &inventoryServiceClient{cc}
}

func (c *inventoryServiceClient) GetInventory(ctx context.Context, in *GetInventoryRequest, opts ...grpc.CallOption) (*GetInventoryResponse, error) {
	out := new(GetInventoryResponse)
	err := grpc.Invoke(ctx, "/motki.model.InventoryService/GetInventory", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) NewInventoryItem(ctx context.Context, in *NewInventoryItemRequest, opts ...grpc.CallOption) (*InventoryItemResponse, error) {
	out := new(InventoryItemResponse)
	err := grpc.Invoke(ctx, "/motki.model.InventoryService/NewInventoryItem", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) SaveInventoryItem(ctx context.Context, in *SaveInventoryItemRequest, opts ...grpc.CallOption) (*InventoryItemResponse, error) {
	out := new(InventoryItemResponse)
	err := grpc.Invoke(ctx, "/motki.model.InventoryService/SaveInventoryItem", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for InventoryService service

type InventoryServiceServer interface {
	GetInventory(context.Context, *GetInventoryRequest) (*GetInventoryResponse, error)
	NewInventoryItem(context.Context, *NewInventoryItemRequest) (*InventoryItemResponse, error)
	SaveInventoryItem(context.Context, *SaveInventoryItemRequest) (*InventoryItemResponse, error)
}

func RegisterInventoryServiceServer(s *grpc.Server, srv InventoryServiceServer) {
	s.RegisterService(&_InventoryService_serviceDesc, srv)
}

func _InventoryService_GetInventory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInventoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).GetInventory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/motki.model.InventoryService/GetInventory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).GetInventory(ctx, req.(*GetInventoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_NewInventoryItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewInventoryItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).NewInventoryItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/motki.model.InventoryService/NewInventoryItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).NewInventoryItem(ctx, req.(*NewInventoryItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_SaveInventoryItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveInventoryItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).SaveInventoryItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/motki.model.InventoryService/SaveInventoryItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).SaveInventoryItem(ctx, req.(*SaveInventoryItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _InventoryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "motki.model.InventoryService",
	HandlerType: (*InventoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInventory",
			Handler:    _InventoryService_GetInventory_Handler,
		},
		{
			MethodName: "NewInventoryItem",
			Handler:    _InventoryService_NewInventoryItem_Handler,
		},
		{
			MethodName: "SaveInventoryItem",
			Handler:    _InventoryService_SaveInventoryItem_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "model.proto",
}

func init() { proto1.RegisterFile("model.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 1549 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0xdf, 0x72, 0xdb, 0xc4,
	0x17, 0xae, 0x2c, 0xff, 0xd3, 0x51, 0x92, 0x9f, 0xb3, 0x6d, 0x13, 0xd7, 0xfd, 0xb5, 0x75, 0x55,
	0xc2, 0x04, 0x66, 0x70, 0xc0, 0x70, 0xd1, 0x76, 0x06, 0x98, 0x24, 0x0d, 0x19, 0x41, 0x9a, 0x64,
	0xe4, 0x94, 0x99, 0x30, 0x0c, 0x1e, 0x59, 0x5a, 0x27, 0x9a, 0xc8, 0x92, 0x2b, 0xaf, 0xd3, 0xba,
	0xb7, 0x4c, 0x79, 0x13, 0x1e, 0x80, 0x87, 0x80, 0x3b, 0xae, 0xb8, 0xe6, 0x5d, 0x98, 0x5d, 0xed,
	0xca, 0x2b, 0xd9, 0x8e, 0xe3, 0xc0, 0x95, 0xbd, 0x67, 0xcf, 0x7e, 0x67, 0xf7, 0xfb, 0xce, 0x9e,
	0x3d, 0x02, 0xbd, 0x17, 0xba, 0xd8, 0x6f, 0xf4, 0xa3, 0x90, 0x84, 0x48, 0xef, 0x85, 0xe4, 0xc2,
	0x6b, 0x30, 0x53, 0xed, 0xd1, 0x59, 0x18, 0x9e, 0xf9, 0x78, 0x8b, 0x4d, 0x75, 0x86, 0xdd, 0x2d,
	0xe2, 0xf5, 0xf0, 0x80, 0xd8, 0xbd, 0x7e, 0xec, 0x5d, 0xe3, 0xde, 0x6c, 0x60, 0xfc, 0x96, 0x03,
	0x6d, 0xf7, 0xdc, 0x8e, 0x6c, 0x87, 0xe0, 0x08, 0xad, 0x40, 0xce, 0x73, 0xab, 0x4a, 0x5d, 0xd9,
	0x54, 0xad, 0x9c, 0xe7, 0xa2, 0x0d, 0x58, 0x71, 0xc2, 0xa8, 0x1f, 0x46, 0x36, 0xf1, 0xc2, 0xa0,
	0xed, 0xb9, 0xd5, 0x1c, 0x9b, 0x5b, 0x96, 0xac, 0xa6, 0x8b, 0x1e, 0x81, 0x6e, 0xfb, 0xbe, 0x67,
	0x07, 0x0e, 0xa6, 0x3e, 0x2a, 0xf3, 0x01, 0x61, 0x32, 0x5d, 0x84, 0x20, 0x1f, 0xd8, 0x3d, 0x5c,
	0xcd, 0xd7, 0x95, 0x4d, 0xcd, 0x62, 0xff, 0xd1, 0x63, 0x58, 0xea, 0xf8, 0x61, 0xe8, 0xfa, 0x5e,
	0xc0, 0x56, 0x15, 0xea, 0xca, 0x66, 0xc1, 0xd2, 0x13, 0x9b, 0xe9, 0xa2, 0x75, 0x28, 0x45, 0x76,
	0x8c, 0x59, 0x64, 0xb3, 0x45, 0x3a, 0xe4, 0x01, 0x03, 0x07, 0x0f, 0x48, 0x34, 0xa2, 0x93, 0x25,
	0x36, 0x09, 0xc2, 0x64, 0xba, 0xe8, 0x19, 0x40, 0xc7, 0x8b, 0xc8, 0x79, 0xdb, 0xb5, 0x09, 0xae,
	0x96, 0xeb, 0xca, 0xa6, 0xde, 0xac, 0x35, 0x62, 0x66, 0x1a, 0x82, 0x99, 0xc6, 0x89, 0x60, 0xc6,
	0xd2, 0x98, 0xf7, 0x0b, 0x9b, 0x60, 0x54, 0x07, 0xdd, 0xc5, 0x03, 0x27, 0xf2, 0xfa, 0xf4, 0x74,
	0x55, 0x8d, 0x6d, 0x59, 0x36, 0x19, 0x3f, 0x2b, 0x70, 0x7b, 0x1f, 0x93, 0x84, 0x36, 0x0b, 0xbf,
	0x1e, 0xe2, 0x01, 0x41, 0x06, 0x14, 0x48, 0x78, 0x81, 0x03, 0x46, 0xa0, 0xde, 0x5c, 0x6a, 0xc4,
	0x44, 0x9f, 0x50, 0x9b, 0x15, 0x4f, 0xa1, 0x0d, 0xc8, 0x47, 0xa1, 0x8f, 0x19, 0x8f, 0x2b, 0xcd,
	0xd5, 0x86, 0xa4, 0x5c, 0xc3, 0x0a, 0x7d, 0x6c, 0xb1, 0x69, 0x4a, 0x8e, 0x23, 0xe0, 0xc7, 0x94,
	0xea, 0x89, 0xcd, 0x74, 0x8d, 0x3e, 0xac, 0x4a, 0x3b, 0x18, 0xf4, 0xc3, 0x60, 0x80, 0xd1, 0x06,
	0x14, 0x23, 0x3c, 0x18, 0xfa, 0x84, 0xef, 0x61, 0x99, 0x07, 0xb0, 0x98, 0xd1, 0xe2, 0x93, 0xe8,
	0x0b, 0xd0, 0x12, 0x28, 0xb6, 0x15, 0xbd, 0xb9, 0x96, 0xda, 0xca, 0x18, 0x79, 0xec, 0x68, 0xfc,
	0xa9, 0x80, 0xbe, 0x3b, 0x16, 0x7e, 0x22, 0x5b, 0x32, 0x69, 0x90, 0x9b, 0x99, 0x06, 0xaa, 0x94,
	0x06, 0x5f, 0xc3, 0xb2, 0x13, 0xe1, 0x38, 0xbf, 0x98, 0x58, 0xf9, 0xb9, 0x62, 0x2d, 0x89, 0x05,
	0xd3, 0xf4, 0x2a, 0x4c, 0xe8, 0x85, 0xd6, 0xa0, 0x48, 0x3c, 0xe7, 0x02, 0x47, 0x2c, 0x8b, 0x34,
	0x8b, 0x8f, 0x8c, 0x0e, 0xdc, 0xa5, 0x32, 0x8e, 0x4f, 0xb4, 0x98, 0x90, 0xd7, 0xb9, 0x1a, 0xc6,
	0x5b, 0xb8, 0x9d, 0x0a, 0xb0, 0x98, 0x4e, 0xcf, 0x41, 0x97, 0xe0, 0xb8, 0x52, 0xd5, 0xb4, 0x52,
	0x12, 0xba, 0xec, 0x6c, 0xbc, 0x57, 0xa0, 0xbc, 0xcd, 0xb9, 0x9f, 0x90, 0x4a, 0x28, 0x91, 0x93,
	0x94, 0xf8, 0x12, 0x96, 0xa8, 0x00, 0xed, 0x6e, 0x38, 0x0c, 0x5c, 0x1c, 0xe7, 0xdc, 0xd5, 0x42,
	0xe8, 0xd4, 0xff, 0x9b, 0xd8, 0x5d, 0x62, 0x39, 0x9f, 0x62, 0xf9, 0x14, 0xd0, 0x3e, 0x26, 0x62,
	0x27, 0x8b, 0x50, 0x3c, 0x2f, 0x9f, 0x0c, 0x1f, 0x2a, 0x63, 0xdc, 0xc5, 0x98, 0xfd, 0x0c, 0xca,
	0x02, 0x88, 0xd3, 0x7a, 0x37, 0x45, 0x6b, 0x82, 0x9b, 0xb8, 0x19, 0xef, 0x55, 0x28, 0x1d, 0x47,
	0xa1, 0x3b, 0x74, 0x88, 0xc4, 0x67, 0x81, 0xf1, 0xb9, 0x0e, 0x25, 0x32, 0xea, 0x4b, 0xdb, 0x2c,
	0xd2, 0xa1, 0xe9, 0xa2, 0x1a, 0x94, 0x5f, 0x0f, 0xed, 0x80, 0x78, 0x64, 0xc4, 0x08, 0x2d, 0x58,
	0xc9, 0x98, 0x5e, 0xf2, 0x9e, 0x1d, 0x5d, 0x60, 0xd2, 0xee, 0x47, 0x9e, 0x13, 0x67, 0xbe, 0x62,
	0xe9, 0xb1, 0xed, 0x98, 0x9a, 0xd0, 0x26, 0x54, 0xb8, 0x4b, 0x84, 0xcf, 0x78, 0x9e, 0xc5, 0x85,
	0x72, 0x25, 0xb6, 0x5b, 0xcc, 0x6c, 0xba, 0x68, 0x0b, 0x6e, 0xf7, 0x6c, 0x82, 0x23, 0xcf, 0xf6,
	0xdb, 0xb8, 0xdb, 0xf5, 0x1c, 0x0f, 0x07, 0xce, 0x88, 0x65, 0xbc, 0x62, 0x21, 0x31, 0xb5, 0x97,
	0xcc, 0xa0, 0x07, 0x00, 0x1d, 0x9b, 0x38, 0xe7, 0xed, 0x81, 0xf7, 0x0e, 0xf3, 0x12, 0xaa, 0x31,
	0x4b, 0xcb, 0x7b, 0x87, 0xd1, 0x27, 0x90, 0xbf, 0xf0, 0x02, 0x97, 0xd5, 0xce, 0x95, 0xe6, 0xbd,
	0x14, 0x39, 0x9c, 0x85, 0xc6, 0x77, 0x5e, 0xe0, 0x5a, 0xcc, 0x0d, 0xdd, 0x07, 0xad, 0x6f, 0x47,
	0x38, 0x20, 0x74, 0x87, 0x5a, 0x7c, 0xd0, 0xd8, 0x60, 0xba, 0xe8, 0x53, 0x28, 0x8b, 0x0d, 0x54,
	0xa1, 0xae, 0x6e, 0xea, 0xcd, 0x3b, 0xd3, 0xf0, 0xac, 0xc4, 0xcb, 0xa8, 0x41, 0x9e, 0x82, 0xa3,
	0x12, 0xa8, 0x3b, 0xaf, 0x4e, 0x2b, 0xb7, 0x90, 0x06, 0x85, 0x9d, 0x57, 0xe6, 0xc1, 0x8b, 0x8a,
	0x62, 0x9c, 0xc3, 0xff, 0xc4, 0x82, 0x05, 0x45, 0x6f, 0x40, 0xa9, 0x1f, 0xaf, 0xe4, 0x9a, 0x4f,
	0xdf, 0x86, 0x70, 0x32, 0xf6, 0x61, 0x75, 0x9f, 0x2a, 0xc1, 0x83, 0x5d, 0x3f, 0x73, 0xe3, 0xf4,
	0xc8, 0x89, 0xf4, 0x30, 0x8e, 0x61, 0xf5, 0x10, 0xbf, 0xb9, 0x01, 0xd0, 0xac, 0xbc, 0x32, 0xce,
	0x01, 0xb5, 0xec, 0x4b, 0x7c, 0x03, 0xc8, 0x45, 0x49, 0x78, 0xca, 0xee, 0x2f, 0x37, 0x0f, 0x16,
	0x88, 0x64, 0x78, 0x50, 0x19, 0x2f, 0xfb, 0x17, 0x4a, 0xa9, 0xf3, 0x37, 0x79, 0x02, 0xfa, 0x4b,
	0xe9, 0xda, 0x48, 0xb4, 0x29, 0xa9, 0xeb, 0x58, 0x85, 0x92, 0x7d, 0x89, 0x23, 0xfb, 0x2c, 0xbe,
	0xf5, 0x8a, 0x25, 0x86, 0xb4, 0x22, 0x76, 0xec, 0x41, 0xfc, 0x36, 0x29, 0x16, 0xfb, 0x6f, 0x9c,
	0xb0, 0x07, 0x42, 0x02, 0xbe, 0xb1, 0x74, 0xaa, 0x24, 0xdd, 0xdf, 0x0a, 0xac, 0x65, 0x61, 0x17,
	0x63, 0x67, 0x1f, 0x8a, 0xac, 0x62, 0x0c, 0x38, 0x39, 0x5b, 0x29, 0x72, 0xa6, 0x63, 0x37, 0xd8,
	0x68, 0xb0, 0x17, 0x90, 0x68, 0x64, 0xf1, 0xe5, 0xb5, 0x16, 0xe8, 0x92, 0x19, 0x55, 0x40, 0xbd,
	0xc0, 0x23, 0x4e, 0x19, 0xfd, 0x8b, 0x1a, 0x50, 0xb8, 0xb4, 0xfd, 0x21, 0x9e, 0xfa, 0xf4, 0xc8,
	0x51, 0x62, 0xb7, 0xe7, 0xb9, 0xa7, 0x8a, 0xf1, 0x57, 0x0e, 0xb4, 0x1d, 0x7f, 0x88, 0xfb, 0x91,
	0x17, 0x10, 0x4a, 0x83, 0x47, 0x70, 0x4f, 0x92, 0x82, 0x0e, 0xe3, 0x1e, 0xce, 0x0f, 0x9d, 0xcc,
	0xeb, 0x09, 0xc2, 0x64, 0xa6, 0x6a, 0xaa, 0x9a, 0x12, 0xf1, 0x3e, 0x68, 0x6c, 0x42, 0x6a, 0x29,
	0xcb, 0xd4, 0x70, 0x48, 0x5f, 0xb1, 0x75, 0x28, 0x75, 0x7d, 0xfb, 0x4c, 0x14, 0x4a, 0xd5, 0x2a,
	0xd2, 0xa1, 0xe9, 0xa2, 0x7b, 0x50, 0xa6, 0x9d, 0x30, 0x2d, 0x8e, 0xac, 0x2a, 0xaa, 0x56, 0x89,
	0x8e, 0xf7, 0xba, 0xdd, 0xb8, 0x10, 0x8f, 0x6b, 0x27, 0x2b, 0x86, 0x2a, 0x2d, 0xc4, 0x49, 0xd1,
	0x44, 0x5b, 0xa9, 0x72, 0x78, 0x3f, 0xc5, 0x43, 0x72, 0x58, 0xb9, 0x20, 0xca, 0x85, 0x5f, 0x63,
	0x78, 0xe3, 0xc2, 0x8f, 0x20, 0x1f, 0x0d, 0x83, 0x41, 0x15, 0x98, 0x9d, 0xfd, 0x37, 0x1e, 0xf2,
	0x8a, 0xb7, 0x04, 0xe5, 0x23, 0xcb, 0xdc, 0x37, 0x0f, 0xb7, 0x0f, 0x2a, 0xb7, 0x50, 0x19, 0xf2,
	0xbb, 0x47, 0xc7, 0xa7, 0x15, 0xc5, 0xf8, 0x0a, 0xaa, 0xbc, 0x59, 0x49, 0xc2, 0x2d, 0x74, 0x19,
	0xdf, 0xc2, 0xbd, 0x29, 0xeb, 0x17, 0x6e, 0x1b, 0x3b, 0x62, 0x31, 0x4f, 0xbd, 0xb5, 0xe9, 0x4c,
	0x58, 0x63, 0x47, 0xe3, 0x0f, 0x05, 0x96, 0xcd, 0xe0, 0x12, 0x07, 0x24, 0x8c, 0x46, 0x26, 0xc1,
	0xbd, 0xd9, 0xd7, 0x73, 0x6e, 0x4e, 0x3c, 0x81, 0x65, 0x67, 0x18, 0xb1, 0x77, 0xc6, 0xc7, 0x97,
	0xd8, 0xe7, 0x99, 0xb1, 0xc4, 0x8d, 0x07, 0xd4, 0x46, 0xf3, 0xa3, 0xe7, 0x05, 0xdc, 0x21, 0x1f,
	0x73, 0xdf, 0xf3, 0x82, 0x78, 0xf2, 0x19, 0x40, 0x17, 0x13, 0xe7, 0x1c, 0xbb, 0x6d, 0x9b, 0xb0,
	0x14, 0x99, 0xf3, 0x65, 0xc0, 0xbd, 0xb7, 0x89, 0xf1, 0x8c, 0xb5, 0xfd, 0xc9, 0x51, 0x16, 0x61,
	0xbf, 0x07, 0x77, 0xd2, 0x4b, 0x17, 0x2d, 0x87, 0x79, 0x7a, 0x6b, 0x38, 0xe7, 0xb5, 0x14, 0xe7,
	0x29, 0x6a, 0x2d, 0xe6, 0x67, 0xbc, 0x81, 0xf5, 0x43, 0xfc, 0x26, 0x3d, 0xf3, 0x1f, 0xbc, 0x3a,
	0x59, 0x7d, 0xd4, 0xac, 0x3e, 0x46, 0x00, 0x55, 0xfa, 0x2c, 0xdd, 0x38, 0xf2, 0xf8, 0xa0, 0xca,
	0xb5, 0x0e, 0x1a, 0xc0, 0xdd, 0x4c, 0xac, 0x9b, 0x12, 0x7b, 0xad, 0x78, 0x1f, 0x7f, 0x04, 0x79,
	0xfa, 0x95, 0x46, 0xef, 0xe5, 0xf6, 0xe1, 0xd1, 0x61, 0x7c, 0x43, 0x5f, 0xb5, 0xf6, 0xac, 0x8a,
	0x82, 0x96, 0x41, 0x3b, 0x38, 0xda, 0x37, 0x5b, 0x27, 0xe6, 0x6e, 0xab, 0x92, 0x6b, 0xfe, 0x92,
	0x03, 0xdd, 0x0c, 0xba, 0x61, 0x0b, 0x47, 0x97, 0xf4, 0x4d, 0x3a, 0x86, 0x25, 0xf9, 0xa3, 0x11,
	0xd5, 0xb3, 0x45, 0x3b, 0xfb, 0x3d, 0x59, 0x7b, 0x38, 0xe3, 0x93, 0x4c, 0x9c, 0xf1, 0x7b, 0x58,
	0x49, 0x7f, 0xbf, 0x20, 0x63, 0x02, 0x73, 0xe2, 0xe3, 0xa6, 0x56, 0x9f, 0xf9, 0xf9, 0x20, 0x70,
	0x5f, 0x82, 0x2e, 0x75, 0xec, 0xe8, 0x51, 0x16, 0x34, 0xd3, 0xcb, 0xd7, 0x1e, 0x4c, 0xef, 0x9c,
	0x39, 0x5c, 0xf3, 0xf7, 0x1c, 0xac, 0xf0, 0x07, 0x5b, 0x70, 0x11, 0x47, 0x10, 0xcd, 0xc1, 0x64,
	0x84, 0x4c, 0xb7, 0x91, 0x89, 0x30, 0xd1, 0x54, 0x7c, 0x0b, 0x30, 0x5e, 0x84, 0x1e, 0xce, 0x40,
	0x13, 0x60, 0xff, 0x9f, 0xda, 0x4a, 0x48, 0x58, 0xe3, 0x56, 0x2d, 0x83, 0x35, 0xd1, 0xc3, 0xcd,
	0xc1, 0x3a, 0x00, 0x5d, 0x6a, 0xd2, 0x32, 0xc7, 0x9c, 0x6c, 0xdf, 0xae, 0x46, 0x6b, 0x86, 0x80,
	0xa4, 0x17, 0x57, 0x50, 0x79, 0xca, 0x92, 0x40, 0x6e, 0x7e, 0x8c, 0x2b, 0xbb, 0x81, 0x38, 0xd2,
	0x93, 0x6b, 0x74, 0x0c, 0xcd, 0xb7, 0x80, 0xa4, 0xf4, 0x10, 0x01, 0x3b, 0xac, 0x29, 0x4e, 0x3f,
	0x24, 0x68, 0x63, 0x5a, 0xe2, 0x4d, 0x3c, 0x54, 0xb5, 0x0f, 0xe7, 0xb9, 0xf1, 0xc8, 0xbf, 0xe6,
	0xa0, 0x92, 0x5c, 0x3f, 0x11, 0xb8, 0xc5, 0x2e, 0x50, 0x62, 0x9e, 0xbc, 0x40, 0xd9, 0xca, 0x5c,
	0x7b, 0x7c, 0x85, 0x07, 0x97, 0xe8, 0x47, 0xa8, 0x64, 0x2b, 0x25, 0xfa, 0x20, 0x2b, 0xfa, 0xb4,
	0x72, 0x56, 0x33, 0xae, 0x28, 0x16, 0x02, 0xfd, 0x27, 0x58, 0x9d, 0x28, 0x87, 0x19, 0xae, 0x66,
	0x95, 0xcb, 0xeb, 0xe0, 0xef, 0x94, 0x7e, 0x28, 0xc4, 0x4f, 0x56, 0x91, 0xfd, 0x7c, 0xfe, 0x4f,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xca, 0xe5, 0x37, 0xa7, 0x17, 0x14, 0x00, 0x00,
}
